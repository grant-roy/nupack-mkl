.\" Copyright (c) 2002 \- 2008 Intel Corporation
.\" All rights reserved.
.\"
.TH p?orml2/p?unml2 3 "Intel Corporation" "Copyright(C) 2002 \- 2008" "Intel(R) Math Kernel Library"
.SH NAME
p?orml2/p?unml2 \- Multiplies a general matrix by the orthogonal/unitary matrix from an LQ factorization determined by \fBp?gelqf\fR (unblocked algorithm).
.SH SYNOPSIS
.PP
\fBcall psorml2\fR(\fIside\fR, \fItrans\fR, \fIm\fR, \fIn\fR, \fIk\fR, \fIa\fR, \fIia\fR, \fIja\fR, \fIdesca\fR, \fItau\fR, \fIc\fR, \fIic\fR, \fIjc\fR, \fIdescc\fR, \fIwork\fR, \fIl\fR\fIwork\fR, \fIinfo\fR)
.PP
\fBcall pdorml2\fR(\fIside\fR, \fItrans\fR, \fIm\fR, \fIn\fR, \fIk\fR, \fIa\fR, \fIia\fR, \fIja\fR, \fIdesca\fR, \fItau\fR, \fIc\fR, \fIic\fR, \fIjc\fR, \fIdescc\fR, \fIwork\fR, \fIl\fR\fIwork\fR, \fIinfo\fR)
.PP
\fBcall pcunml2\fR(\fIside\fR, \fItrans\fR, \fIm\fR, \fIn\fR, \fIk\fR, \fIa\fR, \fIia\fR, \fIja\fR, \fIdesca\fR, \fItau\fR, \fIc\fR, \fIic\fR, \fIjc\fR, \fIdescc\fR, \fIwork\fR, \fIl\fR\fIwork\fR, \fIinfo\fR)
.PP
\fBcall pzunml2\fR(\fIside\fR, \fItrans\fR, \fIm\fR, \fIn\fR, \fIk\fR, \fIa\fR, \fIia\fR, \fIja\fR, \fIdesca\fR, \fItau\fR, \fIc\fR, \fIic\fR, \fIjc\fR, \fIdescc\fR, \fIwork\fR, \fIl\fR\fIwork\fR, \fIinfo\fR)
.SH INPUT PARAMETERS

.TP 10
\fBside\fR
.NL
(global) \fBCHARACTER\fR. 
.IP
= \fB\'L\'\fR: apply \fIQ\fR or \fIQ\fR**\fIT\fR for real flavors (\fIQ\fR**\fIH\fR for complex flavors) from the left,
.IP
= \fB\'R\'\fR: apply \fIQ\fR or \fIQ\fR**\fIT\fR for real flavors (\fIQ\fR**\fIH\fR for complex flavors) from the right.
.TP 10
\fBtrans\fR
.NL
(global) \fBCHARACTER\fR. 
.IP
= \fB\'N\'\fR: apply \fIQ\fR (no transpose)
.IP
= \fB\'T\'\fR: apply \fIQ\fR**\fIT\fR (transpose, for real flavors)
.IP
= \fB\'C\'\fR: apply \fIQ\fR**\fIH\fR (conjugate transpose, for complex flavors)
.TP 10
\fBm\fR
.NL
(global) \fBINTEGER\fR. 
.IP
The number of rows to be operated on, that is, the number of rows of the distributed submatrix sub(\fIC\fR). \fIm\fR \(>= 0.
.TP 10
\fBn\fR
.NL
(global) \fBINTEGER\fR. 
.IP
The number of columns to be operated on, that is, the number of columns of the distributed submatrix sub(\fIC\fR). \fIn\fR \(>= 0.
.TP 10
\fBk\fR
.NL
(global) \fBINTEGER\fR. 
.IP
The number of elementary reflectors whose product defines the matrix \fIQ\fR. 
.IP
If \fIside\fR = \fB\'L\'\fR, \fIm \fR\(>=\fI k\fR \(>=  0;
.IP
if \fIside\fR = \fB\'R\'\fR, \fIn \fR\(>=\fI k\fR \(>= 0.
.TP 10
\fBa\fR
.NL
(local)
.IP
\fBREAL\fR for \fBpsorml2\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpdorml2\fR
.IP
\fBCOMPLEX\fR for \fBpcunml2\fR
.IP
\fBCOMPLEX*16\fR for \fBpzunml2\fR. 
.IP
Pointer into the local memory to an array, \fBDIMENSION\fR
.IP
(\fIlld\(ula\fR, \fILOCc\fR(\fIja\fR+\fIm\fR-1) if \fIside\fR=\fB\'L\'\fR,
.IP
(\fIlld\(ula\fR, \fILOCc\fR(\fIja\fR+\fIn\fR-1) if \fIside\fR=\fB\'R\'\fR, 
.IP
where \fIlld\(ula\fR \(>=  max (1, \fILOCr\fR(\fIia\fR+\fIk\fR-1)). 
.IP
On entry, the \fIi\fR-th row must contain the vector that defines the elementary reflector \fIH\fR(\fIi\fR), \fIia\fR \(<=\fI i\fR \(<=\fI ia\fR+\fIk\fR-1, as returned by  in the \fIk\fR rows of its distributed matrix argument \fIA\fR(\fIia\fR:\fIia\fR+\fIk\fR-1, \fIja\fR:*). The argument \fIA\fR(\fIia\fR:\fIia\fR+\fIk\fR-1, \fIja\fR:*) is modified by the routine but restored on exit.
.TP 10
\fBia\fR
.NL
(global) \fBINTEGER\fR. 
.IP
The row index in the global array \fIA\fR indicating the first row of sub(\fIA\fR).
.TP 10
\fBja\fR
.NL
(global) \fBINTEGER\fR. 
.IP
The column index in the global array \fIA\fR indicating the first column of sub(\fIA\fR).
.TP 10
\fBdesca\fR
.NL
(global and local) \fBINTEGER\fR array of \fBDIMENSION\fR (\fIdlen\(ul\fR). The array descriptor for the distributed matrix \fIA\fR. 
.TP 10
\fBtau\fR
.NL
(local) 
.IP
\fBREAL\fR for \fBpsorml2\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpdorml2\fR
.IP
\fBCOMPLEX\fR for \fBpcunml2\fR
.IP
\fBCOMPLEX*16\fR for \fBpzunml2\fR. 
.IP
Array, \fBDIMENSION\fR\fI LOCc\fR(\fIia\fR+\fIk\fR-1). This array contains the scalar factors \fItau\fR(\fIi\fR) of the elementary reflector \fIH\fR(\fIi\fR), as returned by . This array is tied to the distributed matrix \fIA\fR.
.TP 10
\fBc\fR
.NL
(local)
.IP
\fBREAL\fR for \fBpsorml2\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpdorml2\fR
.IP
\fBCOMPLEX\fR for \fBpcunml2\fR
.IP
\fBCOMPLEX*16\fR for \fBpzunml2\fR. 
.IP
Pointer into the local memory to an array, \fBDIMENSION\fR(\fIlld\(ulc\fR, \fILOCc\fR(\fIjc\fR+\fIn\fR-1)). On entry, the local pieces of the distributed matrix sub (\fIC\fR).
.TP 10
\fBic\fR
.NL
(global) \fBINTEGER\fR. 
.IP
The row index in the global array \fIC\fR indicating the first row of sub(\fIC\fR).
.TP 10
\fBjc\fR
.NL
(global) \fBINTEGER\fR. 
.IP
The column index in the global array \fIC\fR indicating the first column of sub(\fIC\fR).
.TP 10
\fBdescc\fR
.NL
(global and local) \fBINTEGER\fR array of \fBDIMENSION\fR (\fIdlen\(ul\fR). The array descriptor for the distributed matrix \fIC\fR. 
.TP 10
\fBwork\fR
.NL
(local)
.IP
\fBREAL\fR for \fBpsorml2\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpdorml2\fR
.IP
\fBCOMPLEX\fR for \fBpcunml2\fR
.IP
\fBCOMPLEX*16\fR for \fBpzunml2\fR. 
.IP
Workspace array, \fBDIMENSION\fR (\fIlwork\fR).
.TP 10
\fBlwork\fR
.NL
(local or global) \fBINTEGER\fR. 
.IP
The dimension of the array \fIwork\fR. 
.IP
\fIlwork\fR is local input and must be at least 
.IP
if \fIside\fR = \fB\'L\'\fR, \fIlwork\fR \(>= \fImqc\fR0 + max(max( 1, \fInpc\fR0), \fBnumroc\fR(\fBnumroc\fR(\fIm\fR+\fIicoffc\fR, \fImb\(ula\fR, 0, 0, \fInprow\fR), \fImb\(ula\fR, 0, 0, \fIlcmp\fR)), 
.IP
if \fIside\fR = \fB\'R\'\fR, \fIlwork\fR \(>=\fI npc\fR0 + max(1, \fImqc\fR0),
.IP
where \fI\fR
.IP
\fIlcmp\fR = \fIlcm\fR / \fInprow\fR,
.IP
\fIlcm\fR = \fIiclm\fR(\fInprow\fR, \fInpcol\fR),
.IP
\fIiroffc\fR = mod(\fIic-1\fR, \fImb\(ulc\fR), \fI\fR
.IP
\fIicoffc\fR = mod(\fIjc-1\fR, \fInb\(ulc\fR), 
.IP
\fIicrow\fR = \fBindxg2p\fR(\fIic\fR, \fImb\(ulc\fR, \fImyrow\fR, \fIrsrc\(ulc\fR, \fInprow\fR), 
.IP
\fIiccol\fR = \fBindxg2p\fR(\fIjc\fR, \fInb\(ulc\fR, \fImycol\fR, \fIcsrc\(ulc\fR, \fInpcol\fR), 
.IP
\fIMpc0\fR = \fBnumroc\fR(\fIm\fR+\fIicoffc\fR, \fImb\(ulc\fR, \fImycol\fR, \fIicrow\fR, \fInprow\fR), 
.IP
\fINqc0\fR = \fBnumroc\fR(\fIn\fR+\fIiroffc\fR, \fInb\(ulc\fR, \fImyrow\fR, \fIiccol\fR, \fInpcol\fR)\fI\fR,
.IP
\fBilcm\fR, \fBindxg2p\fR and \fBnumroc\fR are ScaLAPACK tool functions; \fImyrow\fR, \fImycol\fR, \fInprow\fR, and \fInpcol\fR can be determined by calling the subroutine \fBblacs\(ulgridinfo\fR. 
.IP
If \fIlwork\fR = -1, then \fIlwork\fR is global input and a workspace query is assumed; the routine only calculates the minimum and optimal size for all work arrays. Each of these values is returned in the first entry of the corresponding work array, and no error message is issued by . 
.SH OUTPUT PARAMETERS

.TP 10
\fBc\fR
.NL
On exit, \fIc\fR is overwritten by \fIQ\fR*sub(\fIC\fR), or \fI\fR\fIQ\fR**\fIT\fR*sub(\fIC\fR)/ \fIQ\fR**\fIH\fR*sub(\fIC\fR),  or sub(\fIC\fR)*\fIQ\fR, or sub(\fIC\fR)*\fIQ\fR**\fIT\fR / sub(\fIC\fR)*\fIQ\fR**\fIH\fR
.TP 10
\fBwork\fR
.NL
On exit, \fIwork\fR(1) returns the minimal and optimal \fIlwork\fR.
.TP 10
\fBinfo\fR
.NL
(local) \fBINTEGER\fR.
.IP
= 0: successful exit 
.IP
< 0: if the \fIi\fR-th argument is an array and the \fIj\fR-entry had an illegal value,
.IP
then \fIinfo\fR = - (\fIi\fR*100+\fIj\fR),
.IP
if the \fIi\fR-th argument is a scalar and had an illegal value,
.IP
then \fIinfo\fR = -\fIi\fR.
.PP
.B NOTE:
The distributed submatrices \fIA\fR(\fIia\fR:*, \fIja\fR:*) and \fIC\fR(\fIic\fR:\fIic\fR+\fIm\fR-1, \fIjc\fR:\fIjc\fR+\fIn\fR-1) must verify some alignment properties, namely the following expressions should be true:
.PP
If \fIside\fR = \fB\'L\'\fR, (\fInb\(ula\fR.eq.\fImb\(ulc\fR .AND. \fI icoffa\fR.eq.\fIiroffc\fR)
.PP
If \fIside\fR = \fB\'R\'\fR, (\fInb\(ula\fR.eq.\fInb\(ulc\fR .AND. \fIicoffa\fR.eq.\fIicoffc\fR .AND. \fIiacol\fR.eq.\fIiccol\fR).
