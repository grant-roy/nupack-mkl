.\" Copyright (c) 2002 \- 2008 Intel Corporation
.\" All rights reserved.
.\"
.TH ?ormr3/?unmr3 3 "Intel Corporation" "Copyright(C) 2002 \- 2008" "Intel(R) Math Kernel Library"
.SH NAME
?ormr3/?unmr3 \- Multiplies a general matrix by the orthogonal/unitary matrix from a RZ factorization determined by \fB?tzrzf\fR (unblocked algorithm).
.SH SYNOPSIS
.PP
\fBcall sormr3\fR( \fIside\fR, \fItrans\fR, \fIm\fR, \fIn\fR, \fIk\fR, \fIl\fR, \fIa\fR, \fIlda\fR, \fItau\fR, \fIc\fR, \fIldc\fR, \fIwork\fR, \fIinfo\fR)
.PP
\fBcall dormr3\fR( \fIside\fR, \fItrans\fR, \fIm\fR, \fIn\fR, \fIk\fR, \fIl\fR, \fIa\fR, \fIlda\fR, \fItau\fR, \fIc\fR, \fIldc\fR, \fIwork\fR, \fIinfo\fR)
.PP
\fBcall cunmr3\fR( \fIside\fR, \fItrans\fR, \fIm\fR, \fIn\fR, \fIk\fR, \fIl\fR, \fIa\fR, \fIlda\fR, \fItau\fR, \fIc\fR, \fIldc\fR, \fIwork\fR, \fIinfo\fR)
.PP
\fBcall zunmr3\fR( \fIside\fR, \fItrans\fR, \fIm\fR, \fIn\fR, \fIk\fR, \fIl\fR, \fIa\fR, \fIlda\fR, \fItau\fR, \fIc\fR, \fIldc\fR, \fIwork\fR, \fIinfo\fR)
.SH INPUT PARAMETERS

.TP 10
\fBside\fR
.NL
\fBCHARACTER*1\fR. 
.IP
= \fB\'L\'\fR: apply \fIQ\fR or \fIQ\fR**\fIT\fR / \fIQ\fR**\fIH\fR from the left
.IP
= \fB\'R\'\fR: apply \fIQ\fR or \fIQ\fR**\fIT\fR / \fIQ\fR**\fIH\fR from the right
.TP 10
\fBtrans\fR
.NL
\fBCHARACTER*1\fR. 
.IP
= \fB\'N\'\fR: apply \fIQ\fR  (no transpose) 
.IP
= \fB\'T\'\fR: apply \fIQ\fR**\fIT\fR (transpose, for real flavors) 
.IP
= \fB\'C\'\fR: apply \fIQ\fR**\fIH\fR (conjugate transpose, for complex flavors)
.TP 10
\fBm\fR
.NL
\fBINTEGER\fR. The number of rows of the matrix \fIC\fR. \fIm\fR\(>= 0.
.TP 10
\fBn\fR
.NL
\fBINTEGER\fR. The number of columns of the matrix \fIC\fR. \fIn\fR\(>= 0.
.TP 10
\fBk\fR
.NL
\fBINTEGER\fR. The number of elementary reflectors whose product defines the matrix \fIQ\fR. 
.IP
If \fIside\fR = \fB\'L\'\fR, \fIm\fR\(>=\fIk\fR\(>= 0; 
.IP
if \fIside\fR = \fB\'R\'\fR , \fIn\fR\(>=\fIk\fR\(>= 0.
.TP 10
\fBl\fR
.NL
\fBINTEGER\fR. The number of columns of the matrix \fIA\fR containing the meaningful part of the Householder reflectors. 
.IP
If \fIside\fR = \fB\'L\'\fR, \fIm\fR\(>=\fIl\fR\(>= 0, 
.IP
if \fIside\fR = \fB\'R\'\fR, \fIn\fR\(>=\fIl\fR\(>= 0.
.TP 10
\fBa\fR
.NL
\fBREAL\fR for \fBsormr3\fR
.IP
\fBDOUBLE PRECISION\fR for \fBdormr3\fR
.IP
\fBCOMPLEX\fR for \fBcunmr3\fR
.IP
\fBCOMPLEX*16\fR for \fBzunmr3\fR.
.IP
Array, \fBDIMENSION\fR
.IP
(\fIlda\fR, \fIm\fR) if \fIside\fR = \fB\'L\'\fR, 
.IP
(\fIlda\fR, \fIn\fR) if \fIside\fR = \fB\'R\'\fR
.IP
The \fIi\fR-th row must contain the vector which defines the elementary reflector \fIH\fR(\fIi\fR), for \fIi\fR = 1,2,...,\fIk\fR, as returned by \fB?tzrzf\fR in the last \fIk\fR rows of its array argument \fIa\fR. The array \fIa\fR is modified by the routine but restored on exit.
.TP 10
\fBlda\fR
.NL
\fBINTEGER\fR. 
.IP
The leading dimension of the array \fIa\fR. \fIlda\fR\(>= max(1,\fIk\fR).
.TP 10
\fBtau\fR
.NL
\fBREAL\fR for \fBsormr3\fR
.IP
\fBDOUBLE PRECISION\fR for \fBdormr3\fR
.IP
\fBCOMPLEX\fR for \fBcunmr3\fR
.IP
\fBCOMPLEX*16\fR for \fBzunmr3\fR.
.IP
Array, \fBDIMENSION\fR (\fIk\fR). 
.IP
\fItau\fR(\fIi\fR) must contain the scalar factor of the elementary  reflector H(\fIi\fR), as returned by \fB?tzrzf\fR.
.TP 10
\fBc\fR
.NL
\fBREAL\fR for \fBsormr3\fR
.IP
\fBDOUBLE PRECISION\fR for \fBdormr3\fR
.IP
\fBCOMPLEX\fR for \fBcunmr3\fR
.IP
\fBCOMPLEX*16\fR for \fBzunmr3\fR.
.IP
Array, \fBDIMENSION\fR (\fIldc\fR, \fIn\fR). 
.IP
On entry, the \fIm\fR-by-\fIn\fR matrix \fIC\fR.
.TP 10
\fBldc\fR
.NL
\fBINTEGER\fR. The leading dimension of the array \fIc\fR. \fIldc\fR\(>= max(1,\fIm\fR).
.TP 10
\fBwork\fR
.NL
\fBREAL\fR for \fBsormr3\fR
.IP
\fBDOUBLE PRECISION\fR for \fBdormr3\fR
.IP
\fBCOMPLEX\fR for \fBcunmr3\fR
.IP
\fBCOMPLEX*16\fR for \fBzunmr3\fR.
.IP
Workspace array, \fBDIMENSION\fR
.IP
(\fIn\fR) if \fIside\fR = \fB\'L\'\fR, 
.IP
(\fIm\fR) if \fIside\fR = \fB\'R\'\fR. 
.SH OUTPUT PARAMETERS

.TP 10
\fBc\fR
.NL
On exit, \fIc\fR is overwritten by \fIQ\fR*\fIC\fR or \fI\fR\fIQ\fR**\fIT\fR*\fIC\fR / \fIQ\fR**\fIH\fR*\fIC\fR,  or \fIC\fR*\fIQ\fR, or \fIC\fR*\fIQ\fR**\fIT\fR / \fIC\fR*\fIQ\fR**\fIH\fR.
.TP 10
\fBinfo\fR
.NL
\fBINTEGER\fR. 
.IP
= 0: successful exit
.IP
< 0: if \fIinfo\fR = -\fIi\fR, the \fIi\fR-th argument had an illegal value
