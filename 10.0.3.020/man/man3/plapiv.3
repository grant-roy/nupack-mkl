.\" Copyright (c) 2002 \- 2008 Intel Corporation
.\" All rights reserved.
.\"
.TH p?lapiv 3 "Intel Corporation" "Copyright(C) 2002 \- 2008" "Intel(R) Math Kernel Library"
.SH NAME
p?lapiv \- Applies a permutation matrix to a general distributed matrix, resulting in row or column pivoting.
.SH SYNOPSIS
.PP
\fBcall pslapiv\fR(\fIdirec\fR, \fIrowcol\fR, \fIpivroc\fR, \fIm\fR, \fIn\fR, \fIa\fR, \fIia\fR, \fIja\fR, \fIdesca\fR, \fIipiv\fR, \fIip\fR, \fIjp\fR, \fIdescip\fR, \fIiwork\fR)
.PP
\fBcall pdlapiv\fR(\fIdirec\fR, \fIrowcol\fR, \fIpivroc\fR, \fIm\fR, \fIn\fR, \fIa\fR, \fIia\fR, \fIja\fR, \fIdesca\fR, \fIipiv\fR, \fIip\fR, \fIjp\fR, \fIdescip\fR, \fIiwork\fR)
.PP
\fBcall pclapiv\fR(\fIdirec\fR, \fIrowcol\fR, \fIpivroc\fR, \fIm\fR, \fIn\fR, \fIa\fR, \fIia\fR, \fIja\fR, \fIdesca\fR, \fIipiv\fR, \fIip\fR, \fIjp\fR, \fIdescip\fR, \fIiwork\fR)
.PP
\fBcall pzlapiv\fR(\fIdirec\fR, \fIrowcol\fR, \fIpivroc\fR, \fIm\fR, \fIn\fR, \fIa\fR, \fIia\fR, \fIja\fR, \fIdesca\fR, \fIipiv\fR, \fIip\fR, \fIjp\fR, \fIdescip\fR, \fIiwork\fR)
.SH INPUT PARAMETERS

.TP 10
\fBdirec\fR
.NL
(global) \fBCHARACTER*1\fR.
.IP
Specifies in which order the permutation is applied:
.IP
= \fB\'F\'\fR (Forward). Applies pivots forward from top of matrix.       Computes \fIP\fR*sub(\fIA\fR). 
.IP
= \fB\'B\'\fR (Backward). Applies pivots backward from bottom of matrix.         Computes inv(\fIP\fR)*sub(\fIA\fR).
.TP 10
\fBrowcol\fR
.NL
(global) \fBCHARACTER*1\fR. 
.IP
Specifies if the rows or columns are to be permuted:
.IP
= \fB\'R\'\fR Rows will be permuted, 
.IP
= \fB\'C\'\fR Columns will be permuted.
.TP 10
\fBpivroc\fR
.NL
(global) \fBCHARACTER*1\fR. 
.IP
Specifies whether \fIipiv\fR is distributed over a process row or column:
.IP
= \fB\'R\'\fR\fIipiv\fR is distributed over a process row, 
.IP
= \fB\'C\'\fR\fIipiv\fR is distributed over a process column.
.TP 10
\fBm\fR
.NL
(global) \fBINTEGER\fR. 
.IP
The number of rows to be operated on, that is, the number of rows of the distributed submatrix sub(\fIA\fR). When \fIm\fR = 0, \fBp?lapiv\fR is set to zero. \fIm \fR\(>= 0.
.TP 10
\fBn\fR
.NL
(global) \fBINTEGER\fR. 
.IP
The number of columns to be operated on, that is, the number of columns of the distributed submatrix sub(\fIA\fR). When \fIn\fR = 0, \fBp?lapiv\fR is set to zero. \fIn \fR\(>= 0.
.TP 10
\fBa\fR
.NL
(local). 
.IP
\fBReal\fR for \fBpslapiv\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpdlapiv\fR
.IP
\fBCOMPLEX\fR for \fBpclapiv\fR
.IP
\fBCOMPLEX*16\fR for \fBpzlapiv\fR. 
.IP
Pointer into the local memory  to an array of \fBDIMENSION\fR(\fIlld\(ula\fR, \fILOCc\fR(\fIja\fR+\fIn\fR-1)) containing the local pieces of the distributed matrix sub(\fIA\fR).
.TP 10
\fBia\fR, \fBja\fR
.NL
(global) \fBINTEGER\fR. 
.IP
The row and column indices in the global array \fIA\fR indicating the first row and the first column of the submatrix sub(\fIA\fR), respectively.
.TP 10
\fBdesca\fR
.NL
(global and local) \fBINTEGER\fR array, \fBDIMENSION\fR (\fIdlen\(ul\fR). The array descriptor for the distributed matrix A.
.TP 10
\fBipiv\fR
.NL
(local). \fBINTEGER\fR. 
.IP
Array, \fBDIMENSION\fR (\fIlipiv\fR) ;
.IP
when \fIrowcol\fR=\fB\'R\'\fR or \fB\'r\'\fR:
.IP
\fIlipiv\fR\(>=\fILOCr\fR(\fIia\fR+\fIm\fR-1) + \fImb\(ula\fR        if \fIpivroc\fR=\fB\'C\'\fR or \fB\'c\'\fR,
.IP
\fIlipiv\fR\(>=\fILOCc\fR(\fIm\fR + \fImod\fR(\fIjp\fR-1, \fInb\(ulp\fR)) if \fIpivroc\fR=\fB\'R\'\fR or \fB\'r\'\fR, and,
.IP
when \fIrowcol\fR=\fB\'C\'\fR or \fB\'c\'\fR:
.IP
\fIlipiv\fR\(>=\fILOCr\fR(\fIn\fR + \fBmod\fR(\fIip\fR-1, \fImb\(ulp\fR)) if \fIpivroc\fR=\fB\'C\'\fR or \fB\'c\'\fR,
.IP
\fIlipiv\fR\(>=\fILOCc\fR(\fIja\fR+\fIn\fR-1) + \fInb\(ula\fR         if \fIpivroc\fR=\fB\'R\'\fR or \fB\'r\'\fR.
.IP
This array contains the pivoting information. \fIipiv(i)\fR is the global row (column), local row (column) \fIi\fR was swapped with. When \fIrowcol\fR=\fB\'R\'\fR or \fB\'r\'\fR and \fIpivroc\fR=\fB\'C\'\fR or \fB\'c\'\fR, or \fIrowcol\fR=\fB\'C\'\fR or \fB\'c\'\fR and \fIpivroc\fR=\fB\'R\'\fR or \fB\'r\'\fR, the last piece of this array of size \fImb\(ula\fR (resp. \fInb\(ula\fR) is used as workspace. In those cases, this array is tied to the distributed matrix \fIA\fR.
.TP 10
\fBip\fR, \fBjp\fR
.NL
(global) \fBINTEGER\fR.  The row and column indices in the global array \fIP\fR indicating the first row and the first column of the submatrix sub(\fIP\fR), respectively.
.TP 10
\fBdescip\fR
.NL
(global and local) \fBINTEGER\fR array, \fBDIMENSION\fR (\fIdlen\(ul\fR).  The array descriptor for the distributed vector \fIipiv\fR.
.TP 10
\fBiwork\fR
.NL
(local). \fBINTEGER\fR.
.IP
Array, \fBDIMENSION\fR (\fIldw\fR), where \fIldw\fR is equal to the workspace necessary for transposition, and the storage of the tranposed \fIipiv\fR :
.IP
Let \fIlcm\fR be the least common multiple of \fInprow\fR and \fInpcol\fR. 
.br
If( \fIrowcol\fR.eq.\'r\' .and.  \fIpivroc\fR. eq.\'r\') then
.br
.br
If( \fInprow\fR.eq. \fInpcol\fR) then
.br
\fIldw\fR = LOCr( \fIn\(ulp\fR + \fBmod\fR(\fIjp\fR-1, \fInb\(ulp\fR) ) + \fInb\(ulp\fR
.br
else
.br
\fIldw\fR = LOCr( \fIn\(ulp\fR + \fBmod\fR(\fIjp\fR-1, \fInb\(ulp\fR) )+
.br
\fInb\(ulp\fR * ceil( ceil(LOCc(\fIn\(ulp\fR)/\fInb\(ulp)\fR / (\fIlcm/npcol\fR) )
.br
end if
.br
else if( \fIrowcol\fR.eq.\'c\' .and.  \fIpivroc\fR.eq.\'c\') then
.br
if( \fInprow\fR.eq.
.br
\fInpcol\fR ) then
.br
\fIldw\fR = LOCc( \fIm\(ulp\fR + mod(\fIip\fR-1, \fImb\(ulp\fR) ) + \fImb\(ulp\fR
.br
else
.br
\fIldw\fR = LOCc( \fIm\(ulp\fR + \fBmod\fR(\fIip\fR-1, \fImb\(ulp\fR) ) +
.br
\fImb\(ulp\fR *ceil(ceil(LOCr(\fIm\(ulp\fR)\fI/mb\(ulp\fR) \fI/\fR (\fIlcm/nprow\fR) )
.br
end if
.br
else
.br
\fIiwork\fR is not referenced.
.br
end if. 
.SH OUTPUT PARAMETERS

.TP 10
\fBa\fR
.NL
(local). 
.IP
On exit, the local pieces of the permuted distributed submatrix.
