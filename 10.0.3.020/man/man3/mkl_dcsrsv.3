.\" Copyright (c) 2002 \- 2008 Intel Corporation
.\" All rights reserved.
.\"
.TH mkl\(uldcsrsv 3 "Intel Corporation" "Copyright(C) 2002 \- 2008" "Intel(R) Math Kernel Library"
.SH NAME
mkl\(uldcsrsv \- Solves a system of linear equations for a sparse matrix in the CSR format.
.SH SYNOPSIS
.PP
.B ! Fortran
.PP
\fBcall mkl\(uldcsrsv\fR(\fItransa\fR, \fIm\fR, \fIalpha\fR, \fImatdescra\fR, \fIval\fR, \fIindx\fR, \fIpntrb\fR, \fIpntre\fR, \fIx\fR, \fIy\fR)
.PP
.B /* C */
.PP
\fBmkl\(uldcsrsv\fR(\fI&transa\fR, \fI&m\fR, \fI&alpha\fR, \fImatdescra\fR, \fIval\fR, \fIindx\fR, \fIpntrb\fR, \fIpntre\fR, \fIx\fR, \fIy\fR);
.SH INPUT PARAMETERS
.PP
Parameter descriptions are common for all implemented interfaces with the exception of data types that refer here to the Fortran 77 standard types. Data types specific to the different interfaces are described in the section \fB``Interfaces''\fR below.
.TP 10
\fBtransa\fR
.NL
\fBCHARACTER*1\fR. Specifies the system of linear equations.
.IP
If \fItransa\fR = \fB\'N\'\fR or \fB\'n\'\fR, then \fIy\fR := \fIalpha\fR*inv(\fIA\fR)*\fIx\fR
.IP
If \fItransa\fR = \fB\'T\'\fR or \fB\'t\'\fR or \fB\'C\'\fR or \fB\'c\'\fR, then \fIy\fR := \fIalpha\fR*inv(\fIA\'\fR)*\fIx\fR,
.TP 10
\fBm\fR
.NL
\fBINTEGER\fR. Number of columns of the matrix \fIA\fR.
.TP 10
\fBalpha\fR
.NL
\fBREAL*8\fR. Specifies the scalar \fIalpha\fR. 
.TP 10
\fBmatdescra\fR
.NL
\fBCHARACTER\fR. Array of six elements, specifies properties of the matrix used for operation. Only first four array elements are used, their possible values are given in the ``Possible Values of the Parameter \fImatdescra\fR (\fIdescra\fR)''.
.TP 10
\fBval\fR
.NL
\fBREAL*8\fR. Array containing non-zero elements of the matrix \fIA\fR. 
.IP
For one-based indexing its length is \fIpntre\fR(m) - \fBpntrb\fR(1).
.IP
For zero-based indexing its length is \fIpntre\fR(m-1) - \fBpntrb\fR(0).
.IP
Refer to \fIvalues\fR array description in CSR Format for more details.
.TP 10
\fBindx\fR
.NL
\fBINTEGER\fR. Array containing the column indices for each non-zero element of the matrix \fIA\fR. Its length is equal to length of the \fIval\fR array.
.IP
Refer to \fIcolumns\fR array description in CSR Format for more details.
.IP

.TP 10
\fBpntrb\fR
.NL
\fBINTEGER\fR. Array of length \fIm\fR. 
.IP
For one-based indexing this array contains row indices, such that \fIpntrb\fR(\fIi\fR) - \fIpntrb\fR(1)+1 is the first index of row \fIi\fR in the arrays \fIval\fR and \fIindx\fR. 
.IP
For zero-based indexing this array contains row indices, such that \fIpntrb\fR(\fIi\fR) - \fIpntrb\fR(0) is the first index of row \fIi\fR in the arrays \fIval\fR and \fIindx\fR. Refer to \fIpointerb\fR array description in CSR Format for more details.
.TP 10
\fBpntre\fR
.NL
\fBINTEGER\fR. Array of length \fIm\fR.
.IP
For one-based indexing this array contains row indices, such that \fIpntre\fR(\fIi\fR) - \fIpntrb\fR(1) is the last index of row \fIi\fR in the arrays \fIval\fR and \fIindx\fR. 
.IP
For zero-based indexing this array contains row indices, such that \fIpntre\fR(\fIi\fR) - \fIpntrb\fR(0)-1 is the last index of row \fIi\fR in the arrays \fIval\fR and \fIindx\fR.Refer to \fIpointerE\fR array description in CSR Format for more details.
.TP 10
\fBx\fR
.NL
\fBREAL*8\fR. 
.IP
Array, \fBDIMENSION\fR at least \fIm\fR.
.IP
On entry, the array \fIx\fR must contain the vector \fIx\fR. The elements are accessed with unit increment.
.TP 10
\fBy\fR
.NL
\fBREAL*8\fR. 
.IP
Array, \fBDIMENSION\fR at least \fIm\fR.
.IP
On entry, the array \fIy\fR must contain the vector \fIy\fR. The elements are accessed with unit increment.
.SH OUTPUT PARAMETERS

.TP 10
\fBy\fR
.NL
Contains solution vector \fIx\fR.
.SH INTERFACES
.PP

.PP
\fBFortran 77:\fR
.br
SUBROUTINE mkl\(uldcsrsv(transa, m, alpha, matdescra, val, indx, pntrb, pntre, x, y)
.br
CHARACTER*1   transa
.br
CHARACTER     matdescra(*)
.br
INTEGER       m
.br
INTEGER       indx(*), pntrb(m), pntre(m)
.br
REAL*8        alpha
.br
REAL*8        val(*)
.br
REAL*8        x(*), y(*)
.PP
\fBC:\fR
.br
.PP
.br
void mkl\(uldcsrsv(char \fI*transa\fR, int \fI*m\fR, double \fI*alpha\fR, char \fI*matdescra\fR,
.br
.br
double \fI*val\fR, int \fI*indx\fR, int \fI*pntrb\fR, int \fI*pntre\fR, double \fI*x\fR, double \fI*y\fR);
