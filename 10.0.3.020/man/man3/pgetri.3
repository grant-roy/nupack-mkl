.\" Copyright (c) 2002 \- 2008 Intel Corporation
.\" All rights reserved.
.\"
.TH p?getri 3 "Intel Corporation" "Copyright(C) 2002 \- 2008" "Intel(R) Math Kernel Library"
.SH NAME
p?getri \- Computes the inverse of a \fILU\fR-factored distributed matrix.
.SH SYNOPSIS
.PP
\fBcall psgetri\fR(\fIn\fR, \fIa\fR, \fIia\fR, \fIja\fR, \fIdesca\fR, \fIipiv\fR, \fIwork\fR, \fIlwork\fR, \fIiwork\fR, \fIliwork\fR, \fIinfo\fR)
.PP
\fBcall pdgetri\fR(\fIn\fR, \fIa\fR, \fIia\fR, \fIja\fR, \fIdesca\fR, \fIipiv\fR, \fIwork\fR, \fIlwork\fR, \fIiwork\fR, \fIliwork\fR, \fIinfo\fR)
.PP
\fBcall pcgetri\fR(\fIn\fR, \fIa\fR, \fIia\fR, \fIja\fR, \fIdesca\fR, \fIipiv\fR, \fIwork\fR, \fIlwork\fR, \fIiwork\fR, \fIliwork\fR, \fIinfo\fR)
.PP
\fBcall pzgetri\fR(\fIn\fR, \fIa\fR, \fIia\fR, \fIja\fR, \fIdesca\fR, \fIipiv\fR, \fIwork\fR, \fIlwork\fR, \fIiwork\fR, \fIliwork\fR, \fIinfo\fR)
.SH INPUT PARAMETERS

.TP 10
\fBn\fR
.NL
(global) \fBINTEGER\fR. The number of rows and columns to be operated on, that is, the order of the distributed submatrix sub(\fIA\fR) (\fIn\fR\(>=0). 
.TP 10
\fBa\fR
.NL
(local)
.IP
\fBREAL\fR for \fBpsgetri\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpdgetri\fR
.IP
\fBCOMPLEX\fR for \fBpcgetri\fR
.IP
\fBDOUBLE COMPLEX\fR for \fBpzgetri\fR. 
.IP
Pointer into the local memory to an array of local dimension \fIa\fR(\fIlld\(ula\fR,\fILOCc\fR(\fIja\fR+\fIn\fR-1)).
.IP
On entry, the array \fIa\fR contains the local pieces of the \fIL\fR and \fIU\fR obtained by the factorization sub(\fIA\fR) = \fIP\fR*\fIL\fR*\fIU\fR computed by \fBp?getrf\fR.
.TP 10
\fBia\fR, \fBja\fR
.NL
(global) \fBINTEGER\fR.  The row and column indices in the global array \fIA\fR indicating the first row and the first column of the submatrix sub(\fIA\fR), respectively.
.TP 10
\fBdesca\fR
.NL
(global and local) \fBINTEGER\fR array, dimension (\fIdlen\(ul\fR).  The array descriptor for the distributed matrix \fIA\fR.
.TP 10
\fBwork\fR
.NL
(local)
.IP
\fBREAL\fR for \fBpsgetri\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpdgetri\fR
.IP
\fBCOMPLEX\fR for \fBpcgetri\fR
.IP
\fBDOUBLE COMPLEX\fR for \fBpzgetri\fR. 
.IP
The array \fIwork\fR of dimension (\fIlwork\fR) is a workspace array.
.TP 10
\fBlwork\fR
.NL
(local) \fBINTEGER\fR.  The dimension of the array \fIwork\fR. \fIlwork\fR must be at least 
.IP
\fIlwork\fR\(>=\fILOCr\fR(\fIn\fR+mod(\fIia\fR-1,\fImb\(ula\fR))*\fInb\(ula\fR. 
.IP
The array \fIwork\fR is used to keep at most an entire column block of sub(\fIA\fR).
.TP 10
\fBiwork\fR
.NL
(local) \fBINTEGER\fR. Workspace array used for physically transposing the pivots, \fBDIMENSION\fR (\fIliwork\fR). 
.TP 10
\fBliwork\fR
.NL
(local or global) \fBINTEGER\fR. The dimension of the array \fIiwork\fR. 
.IP
The minimal value \fIliwork\fR of is determined by the following code:
.br
if NPROW == NPCOL then
.br
.br
\fIliwork\fR = LOCc(n\(ula + mod(\fIja\fR-1,nb\(ula))+ nb\(ula 
.br
else 
.br
\fIliwork\fR = LOCc(n\(ula + mod(\fIja\fR-1,nb\(ula)) + 
.br
max(ceil(ceil(LOCr(m\(ula)/mb\(ula)/(lcm/NPROW)),nb\(ula)
.br
end if
.IP
where \fBlcm\fR is the least common multiple of process rows and columns (\fBNPROW\fR and \fBNPCOL\fR).
.SH OUTPUT PARAMETERS

.TP 10
\fBipiv\fR
.NL
(local) \fBINTEGER\fR. 
.IP
Array, dimension (\fILOCr\fR(\fIm\(ula\fR)+ \fImb\(ula\fR). 
.IP
This array contains the pivoting information. 
.IP
If \fIipiv\fR\fB(i)\fR=\fBj\fR, then the local row \fBi\fR was swapped with the global row \fBj\fR. 
.IP
This array is tied to the distributed matrix \fIA\fR.
.TP 10
\fBwork\fR(1)
.NL
On exit, \fIwork\fR(1) contains the minimum value of \fIlwork\fR required for optimum performance.
.TP 10
\fBiwork\fR(1)
.NL
On exit, \fIiwork\fR(1) contains the minimum value of \fIliwork\fR required for optimum performance.
.TP 10
\fBinfo\fR
.NL
(global) \fBINTEGER\fR. If \fIinfo\fR=0, the execution is successful.
.IP
\fIinfo\fR < 0: 
.IP
If the \fIi\fR-th argument is an array and the \fIj-\fRth entry had an illegal value, then \fIinfo\fR = -(\fIi\fR*100+\fIj\fR); if the \fIi-\fRth argument is a  scalar and had an illegal value, then \fIinfo\fR = \fI-i\fR.
.IP
\fIinfo\fR> 0: 
.IP
If \fIinfo\fR = \fIi\fR, \fIU\fR(\fIi\fR,\fIi\fR) is exactly zero.  The factorization has been completed, but the factor \fIU\fR is exactly singular, and division by zero will occur if it is used to solve a system of equations.
