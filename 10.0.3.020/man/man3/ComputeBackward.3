.\" Copyright (c) 2002 \- 2008 Intel Corporation
.\" All rights reserved.
.\"
.TH ComputeBackward 3 "Intel Corporation" "Copyright(C) 2002 \- 2008" "Intel(R) Math Kernel Library"
.SH NAME
ComputeBackward \- Computes the backward FFT.
.SH SYNOPSIS
.PP
.B ! Fortran
.PP
\fBStatus\fR = \fBDftiComputeBackward\fR( \fIDesc\(ulHandle\fR, \fIX\(ulinout\fR)
.PP
\fBStatus\fR = \fBDftiComputeBackward\fR( \fIDesc\(ulHandle\fR, \fIX\(ulin\fR, \fIX\(ulout\fR)
.PP
.B /* C */
.PP
\fBstatus\fR = \fBDftiComputeBackward\fR( \fIdesc\(ulhandle\fR, \fIx\(ulinout\fR);
.PP
\fBstatus\fR = \fBDftiComputeBackward\fR( \fIdesc\(ulhandle\fR, \fIx\(ulin\fR, \fIx\(ulout\fR);
.PP

.br
! Fortran Interface
.br
INTERFACE DftiComputeBackward
.br
//Note that the body provided here is to illustrate the different
.br
//argument list and types of dummy arguments. The interface
.br
//does not guarantee what the actual function names are.
.br
//Users can only rely on the function name following the
.br
//keyword INTERFACE
.br
// One argument single precision complex
.br
FUNCTION some\(ulactual\(ulfunction\(ul5\(ulC( Desc\(ulHandle, X )
.br
INTEGER :: some\(ulactual\(ulfunction\(ul5\(ulC
.br
TYPE(DFTI\(ulDESCRIPTOR), POINTER :: Desc\(ulHandle
.br
COMPLEX, INTENT(INOUT) :: X(*)
.br
END FUNCTION some\(ulactual\(ulfunction\(ul5\(ulC
.br
// One argument double precision complex
.br
FUNCTION some\(ulactual\(ulfunction\(ul5\(ulZ( Desc\(ulHandle, X )
.br
INTEGER :: some\(ulactual\(ulfunction\(ul5\(ulZ
.br
TYPE(DFTI\(ulDESCRIPTOR), POINTER :: Desc\(ulHandle
.br
COMPLEX (Kind((0D0,0D0))), INTENT(INOUT) :: X(*)
.br
END FUNCTION some\(ulactual\(ulfunction\(ul5\(ulZ
.br
// One argument single precision real
.br
FUNCTION some\(ulactual\(ulfunction\(ul5\(ulR( Desc\(ulHandle, X )
.br
INTEGER :: some\(ulactual\(ulfunction\(ul5\(ulR
.br
TYPE(DFTI\(ulDESCRIPTOR), POINTER :: Desc\(ulHandle
.br
REAL, INTENT(INOUT) :: X(*)
.br
END FUNCTION some\(ulactual\(ulfunction\(ul5\(ulR
.br
// One argument double precision real
.br
...
.br
// Two argument single precision complex
.br
...
.br
...
.br
FUNCTION some\(ulactual\(ulfunction\(ul5\(ulCC( Desc\(ulHandle, X\(ulIn, Y\(ulOut )
.br
INTEGER :: some\(ulactual\(ulfunction\(ul5\(ulCC
.br
TYPE(DFTI\(ulDESCRIPTOR), POINTER :: Desc\(ulHandle
.br
COMPLEX, INTENT(IN) :: X\(ulIn(*)
.br
COMPLEX, INTENT(OUT) :: Y\(ulOut(*)
.br
END FUNCTION some\(ulactual\(ulfunction\(ul5\(ulCCEND INTERFACE DftiComputeBackward END INTERFACE DftiComputeBackward
.br
 
.br
/* C prototype */
.br
long DftiComputeBackward( DFTI\(ulDESCRIPTOR\(ulHANDLE,
.br
      void *,
.br
      ... );
.br
 
.PP
The implementations of the FFT interface expect the data be treated as data stored linearly in memory with a regular "stride" pattern. The function expects the starting address of the first element. Hence we use the assume-size declaration in Fortran.
.PP
The descriptor by itself contains sufficient information to determine exactly how many arguments and of what type should be present. The implementation could use this information to check against possible input inconsistency.
