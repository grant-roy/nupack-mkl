.\" Copyright (c) 2002 \- 2008 Intel Corporation
.\" All rights reserved.
.\"
.TH p?dttrsv 3 "Intel Corporation" "Copyright(C) 2002 \- 2008" "Intel(R) Math Kernel Library"
.SH NAME
p?dttrsv \- Computes an LU factorization of a general band matrix, using partial pivoting with row interchanges. The routine is called by \fBp?dttrs\fR.
.SH SYNOPSIS
.PP
\fBcall psdttrsv\fR(\fIuplo\fR, \fItrans\fR, \fIn\fR, \fInrhs\fR, \fIdl\fR, \fId\fR, \fIdu\fR, \fIja\fR, \fIdesca\fR, \fIb\fR, \fIib\fR, \fIdescb\fR, \fIaf\fR, \fIlaf\fR, \fIwork\fR, \fIlwork\fR, \fIinfo\fR)
.PP
\fBcall pddttrsv\fR(\fIuplo\fR, \fItrans\fR, \fIn\fR, \fInrhs\fR, \fIdl\fR, \fId\fR, \fIdu\fR, \fIja\fR, \fIdesca\fR, \fIb\fR, \fIib\fR, \fIdescb\fR, \fIaf\fR, \fIlaf\fR, \fIwork\fR, \fIlwork\fR, \fIinfo\fR)
.PP
\fBcall pcdttrsv\fR(\fIuplo\fR, \fItrans\fR, \fIn\fR, \fInrhs\fR, \fIdl\fR, \fId\fR, \fIdu\fR, \fIja\fR, \fIdesca\fR, \fIb\fR, \fIib\fR, \fIdescb\fR, \fIaf\fR, \fIlaf\fR, \fIwork\fR, \fIlwork\fR, \fIinfo\fR)
.PP
\fBcall pzdttrsv\fR(\fIuplo\fR, \fItrans\fR, \fIn\fR, \fInrhs\fR, \fIdl\fR, \fId\fR, \fIdu\fR, \fIja\fR, \fIdesca\fR, \fIb\fR, \fIib\fR, \fIdescb\fR, \fIaf\fR, \fIlaf\fR, \fIwork\fR, \fIlwork\fR, \fIinfo\fR)
.SH INPUT PARAMETERS

.TP 10
\fBuplo\fR
.NL
(global) \fBCHARACTER\fR. 
.IP
If \fIuplo\fR=\fB\'U\'\fR, the upper triangle of \fIA\fR(1:\fIn\fR, \fIja\fR:\fIja\fR+\fIn\fR-1) is stored, 
.IP
if \fIuplo\fR = \fB\'L\'\fR, the lower triangle of \fIA\fR(1:\fIn\fR, \fIja\fR:\fIja\fR+\fIn\fR-1) is stored.
.TP 10
\fBtrans\fR
.NL
(global) \fBCHARACTER\fR. 
.IP
If \fItrans\fR = \fB\'N\'\fR, solve with \fIA\fR(1:\fIn\fR, \fIja\fR:\fIja\fR+\fIn\fR-1), 
.IP
if \fItrans\fR = \fB\'C\'\fR, solve with conjugate transpose \fIA\fR(1:\fIn\fR, \fIja\fR:\fIja\fR+\fIn\fR-1).
.TP 10
\fBn\fR
.NL
(global) \fBINTEGER\fR. The order of the distributed submatrix \fIA\fR;(\fIn\fR\(>= 0).
.TP 10
\fBnrhs\fR
.NL
(global) \fBINTEGER\fR. The number of right-hand sides; the number of columns of the distributed submatrix \fIB\fR(\fIib\fR:\fIib\fR+\fIn\fR-1, 1:\fInrhs\fR). (\fInrhs\fR\(>= 0). 
.TP 10
\fBdl\fR
.NL
(local). 
.IP
\fBREAL\fR for \fBpsdttrsv\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpddttrsv\fR
.IP
\fBCOMPLEX\fR for \fBpcdttrsv\fR
.IP
\fBCOMPLEX*16\fR for \fBpzdttrsv\fR. 
.IP
Pointer to local part of global vector storing the lower diagonal of the matrix. 
.IP
Globally, \fIdl\fR(1) is not referenced, and \fIdl\fR must be aligned with \fId\fR. 
.IP
Must be of size \(>=\fIdesca\fR( \fInb\fR\(ul ).
.TP 10
\fBd\fR
.NL
(local). 
.IP
\fBREAL\fR for \fBpsdttrsv\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpddttrsv\fR
.IP
\fBCOMPLEX\fR for \fBpcdttrsv\fR
.IP
\fBCOMPLEX*16\fR for \fBpzdttrsv\fR. 
.IP
Pointer to local part of global vector storing the main diagonal of the matrix.
.TP 10
\fBdu\fR
.NL
(local). 
.IP
\fBREAL\fR for \fBpsdttrsv\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpddttrsv\fR
.IP
\fBCOMPLEX\fR for \fBpcdttrsv\fR
.IP
\fBCOMPLEX*16\fR for \fBpzdttrsv\fR. 
.IP
Pointer to local part of global vector storing the upper diagonal of the matrix. 
.IP
Globally, \fIdu\fR(\fIn\fR) is not referenced, and \fIdu\fR must be aligned with \fId\fR.
.TP 10
\fBja\fR
.NL
(global) \fBINTEGER\fR.  The index in the global array \fIa\fR that points to the start of the matrix to be operated on (which may be either all of \fIA\fR or a submatrix of \fIA\fR).
.TP 10
\fBdesca\fR
.NL
(global and local). \fBINTEGER\fR array of \fBDIMENSION\fR (\fIdlen\(ul\fR). 
.IP
if 1\fId\fR type (\fIdtype\(ula\fR = 501 or 502), \fIdlen\fR\(>= 7; 
.IP
if 2\fId\fR type (\fIdtype\(ula\fR = 1), \fIdlen\fR\(>= 9. 
.IP
The array descriptor for the distributed matrix \fIA\fR. Contains information of mapping of \fIA\fR to memory.
.TP 10
\fBb\fR
.NL
(local)
.IP
\fBREAL\fR for \fBpsdttrsv\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpddttrsv\fR
.IP
\fBCOMPLEX\fR for \fBpcdttrsv\fR
.IP
\fBCOMPLEX*16\fR for \fBpzdttrsv\fR. 
.IP
Pointer into the local memory to an array of local lead \fBDIMENSION \fR\fIlld\(ulb\fR\(>=\fInb\fR. On entry, this array contains the local pieces of the right-hand sides \fIB\fR(\fIib\fR:\fIib\fR+\fIn\fR-1, 1 :\fInrhs\fR). 
.TP 10
\fBib\fR
.NL
(global). \fBINTEGER\fR. The row index in the global array \fIb\fR that points to the first row of the matrix to be operated on (which may be either all of \fIb\fR or a submatrix of \fIB\fR).
.TP 10
\fBdescb\fR
.NL
(global and local).\fBINTEGER\fR array of \fBDIMENSION\fR (\fIdlen\(ul\fR).
.IP
if 1\fId\fR type (\fIdtype\(ulb\fR = 502), \fIdlen\fR\(>=7;
.IP
if 2\fId\fR type (\fIdtype\(ulb\fR = 1), \fIdlen\fR\(>= 9. 
.IP
The array descriptor for the distributed matrix \fIB\fR. Contains information of mapping \fIB\fR to memory.
.TP 10
\fBlaf\fR
.NL
(local). 
.IP
\fBINTEGER\fR.
.IP
Size of user-input Auxiliary Filling space \fIaf\fR. 
.IP
\fIlaf\fR must be \(>= 2*(\fInb\fR+2). If \fIlaf\fR is not large enough, an error code is returned  and the minimum acceptable size will be returned in \fIaf\fR(1).
.TP 10
\fBwork\fR
.NL
(local).
.IP
\fBREAL\fR for \fBpsdttrsv\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpddttrsv\fR
.IP
\fBCOMPLEX\fR for \fBpcdttrsv\fR
.IP
\fBCOMPLEX*16\fR for \fBpzdttrsv\fR. 
.IP
Temporary workspace. This space may be overwritten in between calls to routines. 
.IP
\fIwork\fR must be the size given in \fIlwork\fR. 
.TP 10
\fBlwork\fR
.NL
(local or global).\fBINTEGER\fR. 
.IP
Size of user-input workspace \fIwork\fR. If \fIlwork\fR is too small, the minimal acceptable size will be returned in \fIwork\fR(1) and an error code is returned. 
.IP
\fIlwork\fR\(>= 10*\fInpcol\fR+4*\fInrhs\fR. 
.SH OUTPUT PARAMETERS

.TP 10
\fBdl\fR
.NL
(local). 
.IP
On exit, this array contains information containing the factors of the matrix.
.TP 10
\fBd\fR
.NL
On exit, this array contains information containing the factors of the matrix. Must be of size \(>=\fIdesca\fR (\fInb\fR\(ul ).
.TP 10
\fBb\fR
.NL
On exit, this contains the local piece of the solutions distributed matrix X.
.TP 10
\fBaf\fR
.NL
(local).
.IP
\fBREAL\fR for \fBpsdttrsv\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpddttrsv\fR
.IP
\fBCOMPLEX\fR for \fBpcdttrsv\fR
.IP
\fBCOMPLEX*16\fR for \fBpzdttrsv\fR. 
.IP
Auxiliary Filling Space. Filling is created during the factorization routine \fBp?dttrf\fR and this is stored in \fIaf\fR. If a linear system  is to be solved using \fBp?dttrs\fR after the factorization routine, \fIaf\fR must not be altered after the factorization.
.TP 10
\fBwork\fR
.NL
On exit, \fIwork\fR(1) contains the minimal \fIlwork\fR.
.TP 10
\fBinfo\fR
.NL
(local). \fBINTEGER\fR.
.IP
If \fIinfo\fR=0, the execution is successful. 
.IP
if \fIinfo\fR< 0: If the \fIi\fR-th argument is an array and the \fIj\fR-entry had an illegal value, then \fIinfo\fR = - (\fIi\fR*100+\fIj\fR), if the \fIi\fR-th argument is a scalar and had an illegal value, then \fIinfo\fR = -\fIi\fR. 
