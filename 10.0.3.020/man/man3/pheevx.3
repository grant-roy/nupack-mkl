.\" Copyright (c) 2002 \- 2008 Intel Corporation
.\" All rights reserved.
.\"
.TH p?heevx 3 "Intel Corporation" "Copyright(C) 2002 \- 2008" "Intel(R) Math Kernel Library"
.SH NAME
p?heevx \- Computes selected eigenvalues and, optionally, eigenvectors of a Hermitian matrix.
.SH SYNOPSIS
.PP
\fBcall pcheevx\fR( \fIjobz\fR, \fIrange\fR, \fIuplo\fR, \fIn\fR, \fIa\fR, \fIia\fR, \fIja\fR, \fIdesca\fR, \fIvl\fR, \fIvu\fR, \fIil\fR, \fIiu\fR, \fIabstol\fR, \fIm\fR, \fInz\fR, \fIw\fR, \fIorfac\fR, \fIz\fR, \fIiz\fR, \fIjz\fR, \fIdescz\fR, \fIwork\fR, \fIlwork\fR, \fIrwork\fR, \fIlrwork\fR, \fIiwork\fR, \fIliwork\fR, \fIifail\fR, \fIiclustr\fR, \fIgap\fR, \fIinfo\fR)
.PP
\fBcall pzheevx\fR( \fIjobz\fR, \fIrange\fR, \fIuplo\fR, \fIn\fR, \fIa\fR, \fIia\fR, \fIja\fR, \fIdesca\fR, \fIvl\fR, \fIvu\fR, \fIil\fR, \fIiu\fR, \fIabstol\fR, \fIm\fR, \fInz\fR, \fIw\fR, \fIorfac\fR, \fIz\fR, \fIiz\fR, \fIjz\fR, \fIdescz\fR, \fIwork\fR, \fIlwork\fR, \fIrwork\fR, \fIlrwork\fR, \fIiwork\fR, \fIliwork\fR, \fIifail\fR, \fIiclustr\fR, \fIgap\fR, \fIinfo\fR)
.SH INPUT PARAMETERS
.PP
\fInp\fR = the number of rows local to a given process. 
.PP
\fInq\fR = the number of columns local to a given process. 
.TP 10
\fBjobz\fR
.NL
(global). \fBCHARACTER*1\fR. Must be \fB\'N\'\fR or \fB\'V\'\fR. 
.IP
Specifies if it is necessary to compute the eigenvectors: 
.IP
If \fIjobz\fR =\fB\'N\'\fR, then only eigenvalues are computed. 
.IP
If \fIjobz\fR =\fB\'V\'\fR, then eigenvalues and eigenvectors are computed.
.TP 10
\fBrange\fR
.NL
(global). \fBCHARACTER*1\fR. Must be \fB\'A\'\fR, \fB\'V\'\fR, or \fB\'I\'\fR. 
.IP
If \fIrange\fR = \fB\'A\'\fR, all eigenvalues will be found. 
.IP
If \fIrange\fR = \fB\'V\'\fR, all eigenvalues in the half-open interval [\fIvl\fR, \fIvu\fR] will be found. 
.IP
If \fIrange\fR = \fB\'I\'\fR, the eigenvalues with indices \fIil\fR through \fIiu\fR will be found. 
.TP 10
\fBuplo\fR
.NL
(global). \fBCHARACTER*1\fR. Must be \fB\'U\'\fR or \fB\'L\'\fR.
.IP
Specifies whether the upper or lower triangular part of the Hermitian matrix \fIA\fR is stored: 
.IP
If \fIuplo\fR = \fB\'U\'\fR, \fIa\fR stores the upper triangular part of \fIA\fR. 
.IP
If \fIuplo\fR = \fB\'L\'\fR, \fIa\fR stores the lower triangular part of \fIA\fR.
.TP 10
\fBn\fR
.NL
(global) \fBINTEGER\fR. The number of rows and columns of the matrix \fIA\fR(\fIn\fR\(>= 0). 
.TP 10
\fBa\fR
.NL
(local). 
.IP
\fBCOMPLEX\fR for \fBpcheevx\fR
.IP
\fBDOUBLE COMPLEX\fR for \fBpzheevx\fR. 
.IP
Block cyclic array of global dimension (\fIn\fR, \fIn\fR) and local dimension (\fIlld\(ula\fR, \fILOC\fR\fIc\fR(\fIja\fR+\fIn\fR-1)). On entry, the Hermitian matrix \fIA\fR. 
.IP
If \fIuplo\fR = \fB\'U\'\fR, only the upper triangular part of \fIA\fR is used to define the elements of the symmetric matrix. 
.IP
If \fIuplo\fR = \fB\'L\'\fR, only the lower triangular part of \fIA\fR is used to define the elements of the Hermitian matrix. 
.TP 10
\fBia\fR, \fBja\fR
.NL
(global) \fBINTEGER\fR.  The row and column indices in the global array \fIa\fR indicating the first row and the first column of the submatrix \fIA\fR, respectively.
.TP 10
\fBdesca\fR
.NL
(global and local) \fBINTEGER\fR array, dimension (\fIdlen\(ul\fR).  The array descriptor for the distributed matrix \fIA\fR. If \fIdesca\fR(\fIctxt\(ul\fR) is incorrect,\fB p?heevx\fR cannot guarantee correct error reporting
.TP 10
\fBvl\fR, \fBvu\fR
.NL
(global)
.IP
\fBREAL\fR for \fBpcheevx\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpzheevx\fR. 
.IP
If \fIrange\fR = \fB\'V\'\fR, the lower and upper bounds of the interval to be searched for eigenvalues; not referenced if \fIrange\fR = \fB\'A\'\fR or \fB\'I\'\fR.
.TP 10
\fBil\fR, \fBiu\fR
.NL
(global)
.IP
\fBINTEGER\fR. If \fIrange\fR =\fB\'I\'\fR, the indices of the smallest and largest eigenvalues to be returned. 
.IP
Constraints: 
.IP
\fIil\fR \(>= 1; min(\fIil\fR,\fIn\fR) \(<= \fIiu\fR \(<= \fIn\fR.
.IP
Not referenced if \fIrange\fR = \fB\'A\'\fR or \fB\'V\'\fR.
.TP 10
\fBabstol\fR
.NL
(global). 
.IP
\fBREAL\fR for \fBpcheevx\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpzheevx\fR. 
.IP
If \fIjobz\fR=\fB\'V\'\fR, setting \fIabstol\fR to \fBp?lamch\fR(\fIcontext\fR, \fB\'U\'\fR) yields the most orthogonal eigenvectors. 
.IP
The absolute error tolerance for the eigenvalues. An approximate eigenvalue is accepted as converged when it is determined to lie in an interval [\fIa\fR, \fIb\fR] of width less than or equal to \fIabstol\fR+\fIeps\fR*max(|\fIa\fR|,|\fIb\fR|), where \fIeps\fR is the machine precision. If \fIabstol\fR is less than or equal to zero, then \fIeps\fR*norm(\fBT\fR) will be used in its place, where norm(\fBT\fR) is the 1-norm of the tridiagonal matrix obtained by reducing \fIA\fR to tridiagonal form. 
.IP
Eigenvalues are computed most accurately when \fIabstol\fR is set to twice the underflow threshold 2*\fBp?lamch\fR(\'S\'), not zero. If this routine returns with ((\fBmod\fR(\fIinfo\fR,2).\fIne\fR.0).\fIor\fR.(\fBmod\fR(\fIinfo\fR/8,2).\fIne\fR.0)), indicating that some eigenvalues or eigenvectors did not converge, try setting \fIabstol\fR to 2*\fBp?lamch\fR(\'S\'). 
.TP 10
\fBorfac\fR
.NL
(global). \fBREAL\fR for \fBpcheevx\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpzheevx\fR. 
.IP
Specifies which eigenvectors should be reorthogonalized. Eigenvectors that correspond to eigenvalues which are within \fItol\fR=\fIorfac\fR*norm(\fIA\fR) of each other are to be reorthogonalized. However, if the workspace is insufficient (see \fIlwork\fR), \fItol\fR may be decreased until all eigenvectors to be reorthogonalized can be stored in one process. No reorthogonalization will be done if \fIorfac\fR equals zero. A default value of 1.0e-3 is used if \fIorfac\fR is negative. 
.IP
\fIorfac\fR should be identical on all processes. 
.TP 10
\fBiz\fR, \fBjz\fR
.NL
(global) \fBINTEGER\fR.  The row and column indices in the global array \fIz\fR indicating the first row and the first column of the submatrix \fIZ\fR, respectively.
.TP 10
\fBdescz\fR
.NL
(global and local) \fBINTEGER\fR array, dimension (\fIdlen\(ul\fR).  The array descriptor for the distributed matrix \fIZ\fR.\fIdescz\fR( \fIctxt\(ul\fR ) must equal \fIdesca\fR( \fIctxt\(ul\fR ).
.TP 10
\fBwork\fR
.NL
(local)
.IP
\fBCOMPLEX\fR for \fBpcheevx\fR
.IP
\fBDOUBLE COMPLEX\fR for \fBpzheevx\fR. 
.IP
Array, \fBDIMENSION\fR (\fIlwork\fR). 
.TP 10
\fBlwork\fR
.NL
(local). \fBINTEGER\fR. The dimension of the array \fIwork\fR. 
.IP
If only eigenvalues are requested: 
.IP
\fIlwork\fR\(>=\fIn\fR + \fBmax\fR(\fInb\fR*(\fInp\fR0 + 1), 3)
.IP
If eigenvectors are requested: 
.IP
\fIlwork\fR\(>=\fIn\fR + (\fInp\fR0+\fImq\fR0+\fInb\fR)*\fInb\fR
.IP
with \fInq\fR0 = \fBnumroc\fR(\fInn\fR, \fInb\fR, 0, 0, \fBNPCOL\fR).
.IP
\fIlwork\fR\(>= 5*\fIn\fR + \fBmax\fR(5*\fInn\fR, \fInp\fR0*\fImq\fR0+2*\fInb\fR*\fInb\fR) + \fBiceil\fR(\fIneig\fR, \fBNPROW\fR*\fBNPCOL\fR)*\fInn\fR
.IP
For optimal performance, greater workspace is needed, that is
.IP
\fIlwork\fR\(>=\fBmax\fR(\fIlwork\fR, \fInhetrd\(ullwork\fR) 
.IP
where \fIlwork\fR is as defined above, and \fInhetrd\(ullwork\fR =  \fIn\fR + 2*(\fIanb\fR+1)*(4*\fInps\fR+2) + (\fInps\fR+1)*\fInps\fR
.IP
\fIictxt\fR = \fIdesca\fR(\fIctxt\(ul\fR)
.IP
\fIanb\fR = \fBpjlaenv\fR(\fIictxt\fR, 3, \'\fBpchettrd\fR\', \fB\'L\fR\', 0, 0, 0, 0)
.IP
\fIsqnpc\fR = \fIsqrt\fR(\fIdble\fR(\fBNPROW\fR * \fBNPCOL\fR))
.IP
\fInps\fR = \fBmax\fR(\fBnumroc\fR(\fIn\fR, 1, 0, 0, \fIsqnpc\fR), 2*\fIanb\fR)
.IP
If \fIlwork\fR = -1, then \fIlwork\fR is global input and a workspace query is assumed; the routine only calculates the size required for optimal performance for all work arrays. Each of these values is returned in the first entry of the corresponding work arrays, and no error message is issued by \fBpxerbla\fR. 
.TP 10
\fBrwork\fR
.NL
(local)
.IP
\fBREAL\fR for \fBpcheevx\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpzheevx\fR. 
.IP
Workspace array, \fBDIMENSION\fR (\fIlrwork\fR). 
.TP 10
\fBlrwork\fR
.NL
(local) \fBINTEGER\fR. The dimension of the array \fIwork\fR. 
.IP
See below for definitions of variables used to define \fIlwork\fR. 
.IP
If no eigenvectors are requested (\fIjobz\fR = \fB\'N\'\fR),  then \fIlrwork\fR\(>= 5*\fInn\fR+4*\fIn.\fR
.IP
If eigenvectors are requested (\fIjobz\fR = \fB\'V\'\fR),  then the amount of workspace required to guarantee that all eigenvectors are computed is: 
.IP
\fIlrwork\fR\(>= 4*\fIn\fR + \fBmax\fR(5*\fInn\fR, \fInp\fR0*\fImq\fR0+2*\fInb\fR*\fInb\fR) + \fBiceil\fR(\fIneig\fR, \fBNPROW\fR*\fBNPCOL\fR)*\fInn\fR
.IP
The computed eigenvectors may not be orthogonal if the minimal workspace is supplied and \fIorfac\fR is too small. If you want to guarantee orthogonality (at the cost of potentially poor performance) you should add the following values to \fIlrwork\fR:
.IP
(\fIclustersize\fR-1)*\fIn\fR,
.IP
where \fIclustersize\fR is the number of eigenvalues in the largest cluster, where a cluster is defined as a set of close eigenvalues: 
.IP
{\fIw\fR(\fIk\fR),..., \fIw\fR(\fIk\fR+\fIclustersize\fR-1)|\fIw\fR(\fIj\fR+1) \(<= \fIw\fR(\fIj\fR)+\fIorfac\fR*2*norm(\fIA\fR)}. 
.IP
Variable definitions: 
.IP
\fIneig\fR = number of eigenvectors requested;
.IP
\fInb\fR = \fIdesca\fR(\fImb\(ul\fR) = \fIdesca\fR(\fInb\(ul\fR) = \fIdescz\fR(\fImb\(ul\fR) = \fIdescz\fR(\fInb\(ul\fR); 
.IP
\fInn\fR = \fBmax\fR(\fIn\fR, \fBNB\fR, 2); 
.IP
\fIdesca\fR(\fIrsrc\(ul\fR) = \fIdesca\fR(\fInb\(ul\fR) = \fIdescz\fR(\fIrsrc\(ul\fR) = \fIdescz\fR(\fIcsrc\(ul\fR) = 0; 
.IP
\fInp\fR0 = \fBnumroc\fR(\fInn\fR, \fInb\fR, 0, 0, \fBNPROW\fR);
.IP
\fImq\fR0 = \fBnumroc\fR(\fBmax\fR(\fIneig\fR, \fInb\fR, 2), \fInb\fR, 0, 0, \fBNPCOL\fR);
.IP
\fBiceil\fR(\fIx\fR, \fIy\fR) is a ScaLAPACK function returning ceiling(\fIx\fR/\fIy\fR) 
.IP
When \fIlrwork\fR is too small: 
.IP
If \fIlwork\fR is too small to guarantee orthogonality, \fBp?heevx\fR attempts to maintain orthogonality in the clusters with the smallest spacing between the eigenvalues. If \fIlwork\fR is too small to compute all the eigenvectors requested, no computation is performed and \fIinfo\fR= -23 is returned. Note that when \fIrange\fR=\fB\'V\'\fR, \fBp?heevx\fR does not know how many eigenvectors are requested until the eigenvalues are computed. Therefore, when \fIrange\fR=\fB\'V\'\fR and as long as \fIlwork\fR is large enough to allow \fBp?heevx\fR  to compute the eigenvalues, \fBp?heevx\fR will compute the eigenvalues and as many eigenvectors as it can.
.IP
Relationship between workspace, orthogonality and performance: 
.IP
If \fIclustersize\fR \(>= \fIn\fR/\fIsqrt\fR(\fBNPROW\fR*\fBNPCOL\fR), then providing enough space to compute all the eigenvectors orthogonally will cause serious degradation in performance. In the limit (that is, \fIclustersize\fR = \fIn\fR-1)\fBp?stein\fR will perform no better than \fB?stein\fR on 1 processor. 
.IP
For \fIclustersize\fR = \fIn\fR/\fIsqrt\fR(\fBNPROW\fR*\fBNPCOL\fR) reorthogonalizing all eigenvectors will increase the total execution time by a factor of 2 or more. 
.IP
For \fIclustersize\fR>\fIn\fR/\fIsqrt\fR(\fBNPROW\fR*\fBNPCOL\fR) execution time will grow as the square of the cluster size, all other factors remaining equal and assuming enough workspace. Less workspace means less reorthogonalization but faster execution. 
.IP
If \fIlwork\fR = -1, then \fIlwork\fR is global input and a workspace query is assumed; the routine only calculates the size required for optimal performance for all work arrays. Each of these values is returned in the first entry of the corresponding work arrays, and no error message is issued by \fBpxerbla\fR. 
.TP 10
\fBiwork\fR
.NL
(local) \fBINTEGER\fR. Workspace array.
.TP 10
\fBliwork\fR
.NL
(local) \fBINTEGER\fR, dimension of \fIiwork\fR. 
.IP
\fIliwork\fR \(>= 6*\fInnp\fR
.IP
Where: \fInnp\fR = \fBmax\fR(\fIn\fR, \fBNPROW\fR*\fBNPCOL\fR+1, 4)
.IP
If \fIliwork\fR = -1, then \fIliwork\fR is global input and a workspace query is assumed; the routine only calculates the minimum and optimal size for all work arrays. Each of these values is returned in the first entry of the corresponding work array, and no error message is issued by \fBpxerbla\fR.
.SH OUTPUT PARAMETERS

.TP 10
\fBa\fR
.NL
On exit, the lower triangle (if \fIuplo\fR = \fB\'L\'\fR), or the upper triangle (if \fIuplo\fR = \fB\'U\'\fR) of \fIA\fR, including the diagonal, is overwritten. 
.TP 10
\fBm\fR
.NL
(global) \fBINTEGER\fR. The total number of eigenvalues found; 0 \(<= \fIm\fR \(<=  \fIn\fR.
.TP 10
\fBnz\fR
.NL
(global) \fBINTEGER\fR. Total number of eigenvectors computed. 0 \(<= \fInz\fR \(<= \fIm\fR. 
.IP
The number of columns of \fIz\fR that are filled. 
.IP
If \fIjobz\fR \(!= \fB\'V\'\fR, \fInz\fR is not referenced. 
.IP
If \fIjobz\fR = \fB\'V\'\fR, \fInz\fR = \fIm\fR unless the user supplies insufficient space and \fBp?heevx\fR is not able to detect this before beginning computation. To get all the eigenvectors requested, the user must supply both sufficient space to hold the eigenvectors in \fIz\fR (\fIm\fR.\fIle\fR.\fIdescz\fR(\fIn\(ul\fR)) and sufficient workspace to compute them. (See \fIlwork\fR). \fBp?heevx\fR is always able to detect insufficient space without computation unless \fIrange\fR.\fIeq\fR.\fB\'V\'\fR. 
.TP 10
\fBw\fR
.NL
(global). 
.IP
\fBREAL\fR for \fBpcheevx\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpzheevx\fR.
.IP
Array, \fBDIMENSION\fR (\fIn\fR). The first \fIm\fR elements contain the selected eigenvalues in ascending order.
.TP 10
\fBz\fR
.NL
(local). 
.IP
\fBCOMPLEX\fR for \fBpcheevx\fR
.IP
\fBDOUBLE COMPLEX\fR for \fBpzheevx\fR.
.IP
Array, global dimension (\fIn\fR, \fIn\fR), local dimension (\fIlld\(ulz\fR, \fILOCc\fR(\fIjz\fR+\fIn\fR-1)).
.IP
If \fIjobz\fR =\fB\'V\'\fR, then on normal exit the first \fIm\fR columns of \fIz\fR contain the orthonormal eigenvectors of the matrix corresponding to the selected eigenvalues. If an eigenvector fails to converge, then that column of \fIz\fR contains the latest approximation to the eigenvector, and the index of the eigenvector is returned in \fIifail\fR. 
.IP
If \fIjobz\fR = \fB\'N\'\fR, then \fIz\fR is not referenced. 
.TP 10
\fIwork\fR(1)
.NL
On exit, returns workspace adequate workspace to allow optimal performance. 
.TP 10
\fBrwork\fR
.NL
(local).
.IP
\fBREAL\fR for \fBpcheevx\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpzheevx\fR.
.IP
Array, \fBDIMENSION\fR (\fIlrwork\fR). On return, \fIrwork(1\fR) contains the optimal amount of workspace required for efficient execution. 
.IP
If \fIjobz\fR=\fB\'N\'\fR\fIrwork(1\fR) = optimal amount of workspace required to compute eigenvalues efficiently. 
.IP
If \fIjobz\fR=\fB\'V\'\fR\fIrwork(1\fR) = optimal amount of workspace required to compute eigenvalues and eigenvectors efficiently with no guarantee on orthogonality. 
.IP
If \fIrange\fR=\fB\'V\'\fR, it is assumed that all eigenvectors may be required. 
.TP 10
\fIiwork\fR(1)
.NL
(local)
.IP
On return, \fIiwork\fR(1) contains the amount of integer workspace required.
.TP 10
\fBifail\fR
.NL
(global) \fBINTEGER\fR. 
.IP
Array, \fBDIMENSION\fR (\fIn\fR). 
.IP
If \fIjobz\fR =\fB\'V\'\fR, then on normal exit, the first \fIm\fR elements of \fIifail\fR are zero. If (\fBmod\fR(\fIinfo\fR,2).\fIne\fR.0) on exit, then \fIifail\fR contains the indices of the eigenvectors that failed to converge. 
.IP
If \fIjobz\fR = \fB\'N\'\fR, then \fIifail\fR is not referenced. 
.TP 10
\fBiclustr\fR
.NL
(global) \fBINTEGER\fR. 
.IP
Array, \fBDIMENSION\fR (2*\fBNPROW\fR*\fBNPCOL\fR). 
.IP
This array contains indices of eigenvectors corresponding to a cluster of eigenvalues that could not be reorthogonalized due to insufficient workspace (see \fIlwork\fR, \fIorfac\fR and \fIinfo\fR). Eigenvectors corresponding to clusters of eigenvalues indexed \fIiclustr\fR(2*\fIi\fR-1) to \fIiclustr\fR(2*\fIi\fR), could not be reorthogonalized due to lack of workspace. Hence the eigenvectors corresponding to these clusters may not be orthogonal. \fIiclustr\fR() is a zero terminated array. (\fIiclustr\fR(2*\fIk\fR).\fIne\fR.0. \fIand\fR. \fIiclustr\fR(2*\fIk\fR+1).\fIeq\fR.0) if and only if \fIk\fR is the number of clusters. \fIiclustr\fR is not referenced if \fIjobz\fR = \fB\'N\'\fR.
.TP 10
\fBgap\fR
.NL
(global)
.IP
\fBREAL\fR for \fBpcheevx\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpzheevx\fR.
.IP
Array, \fBDIMENSION\fR(\fBNPROW\fR*\fBNPCOL\fR)
.IP
This array contains the gap between eigenvalues whose eigenvectors could not be reorthogonalized. The output values in this array correspond to the clusters indicated by the array \fIiclustr\fR. As a result, the dot product between eigenvectors corresponding to the \fIi\fR-th cluster may be as high as (\fIC\fR*\fIn\fR)/\fIgap\fR(\fIi\fR) where \fIC\fR is a small constant. 
.TP 10
\fBinfo\fR
.NL
(global) \fBINTEGER\fR. 
.IP
If \fIinfo\fR = 0, the execution is successful. 
.IP
If \fIinfo\fR < 0: 
.IP
If the \fIi\fR-th argument is an array and the \fIj\fR-entry had an illegal value, then \fIinfo\fR = -(\fIi\fR*100+\fIj\fR), if the \fIi\fR-th argument is a scalar and had an illegal value, then \fIinfo\fR = -\fIi\fR. 
.IP
If \fIinfo\fR> 0: 
.IP
If (\fBmod\fR(\fIinfo\fR,2).\fIne\fR.0), then one or more eigenvectors failed to converge. Their indices are stored in \fIifail\fR. Ensure \fIabstol\fR=2.0*\fBp?lamch\fR(\fB\'U\'\fR)
.IP
If (\fBmod\fR(\fIinfo\fR/2,2).\fIne\fR.0), then eigenvectors corresponding to one or more clusters of eigenvalues could not be reorthogonalized because of insufficient workspace.The indices of the clusters are stored in the array \fIiclustr\fR. 
.IP
If (\fBmod\fR(\fIinfo\fR/4,2).\fIne\fR.0), then space limit prevented \fBp?syevx\fR from computing all of the eigenvectors between \fIvl\fR and \fIvu\fR. The number of eigenvectors computed is returned in \fInz\fR. 
.IP
If (\fBmod\fR(\fIinfo\fR/8,2).\fIne\fR.0), then  failed to compute eigenvalues. Ensure \fIabstol\fR=2.0*\fBp?lamch\fR(\fB\'U\'\fR).
