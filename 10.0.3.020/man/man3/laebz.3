.\" Copyright (c) 2002 \- 2008 Intel Corporation
.\" All rights reserved.
.\"
.TH ?laebz 3 "Intel Corporation" "Copyright(C) 2002 \- 2008" "Intel(R) Math Kernel Library"
.SH NAME
?laebz \- Computes the number of eigenvalues of a real symmetric tridiagonal matrix which are less than or equal to a given value, and performs other tasks required by the routine \fB?stebz\fR.
.SH SYNOPSIS
.PP
\fBcall slaebz\fR( \fIijob\fR, \fInitmax\fR, \fIn\fR, \fImmax\fR, \fIminp\fR, \fInbmin\fR, \fIabstol\fR, \fIreltol\fR, \fIpivmin\fR, \fId\fR, \fIe\fR, \fIe2\fR, \fInval\fR, \fIab\fR, \fIc\fR, \fImout\fR, \fInab\fR, \fIwork\fR, \fIiwork\fR, \fIinfo\fR)
.PP
\fBcall dlaebz\fR( \fIijob\fR, \fInitmax\fR, \fIn\fR, \fImmax\fR, \fIminp\fR, \fInbmin\fR, \fIabstol\fR, \fIreltol\fR, \fIpivmin\fR, \fId\fR, \fIe\fR, \fIe2\fR, \fInval\fR, \fIab\fR, \fIc\fR, \fImout\fR, \fInab\fR, \fIwork\fR, \fIiwork\fR, \fIinfo\fR)
.SH INPUT PARAMETERS

.TP 10
\fBijob\fR
.NL
\fBINTEGER\fR. Specifies what is to be done:
.IP
= 1: Compute \fInab\fR for the initial intervals.
.IP
= 2: Perform bisection iteration to find eigenvalues of \fIT\fR.
.IP
= 3: Perform bisection iteration to invert \fIn\fR(\fIw\fR), i.e., to find a point which has a specified number of eigenvalues of \fIT\fR to its left. Other values will cause \fB?laebz\fR to return with \fIinfo\fR=-1.
.TP 10
\fBnitmax\fR
.NL
\fBINTEGER\fR. The maximum number of "levels" of bisection to be performed, i.e., an interval of width \fIW\fR will not be made smaller than 2**-\fBnitmax\fR*\fIW\fR. If not all intervals have converged after \fInitmax\fR iterations, then \fIinfo\fR is set to the number of non-converged intervals.
.TP 10
\fBn\fR
.NL
\fBINTEGER\fR. The dimension \fIn\fR of the tridiagonal matrix \fIT\fR. It must be at least 1.
.TP 10
\fBmmax\fR
.NL
\fBINTEGER\fR. The maximum number of intervals. If more than \fImmax\fR intervals are generated, then \fB?laebz\fR will quit with \fIinfo\fR=\fImmax\fR+1.
.TP 10
\fBminp\fR
.NL
\fBINTEGER\fR. The initial number of intervals. It may not be greater than \fImmax\fR.
.TP 10
\fBnbmin\fR
.NL
\fBINTEGER\fR. The smallest number of intervals that should be processed using a vector loop. If zero, then only the scalar loop will be used.
.TP 10
\fBabstol\fR
.NL
\fBREAL\fR for \fBslaebz\fR
.IP
\fBDOUBLE PRECISION\fR for \fBdlaebz\fR. 
.IP
The minimum (absolute) width of an interval. When an interval is narrower than \fIabstol\fR, or than \fIreltol\fR times the larger (in magnitude) endpoint, then it is considered to be sufficiently small, i.e., converged. This must be at least zero.
.TP 10
\fBreltol\fR
.NL
\fBREAL\fR for \fBslaebz\fR
.IP
\fBDOUBLE PRECISION\fR for \fBdlaebz\fR. 
.IP
The minimum relative width of an interval. When an interval is narrower than \fIabstol\fR, or than \fIreltol\fR times the larger (in magnitude) endpoint, then it is considered to be sufficiently small, i.e., converged. Note: this should always be at least \fIradix\fR*\fImachine\fR\fIepsilon\fR.
.TP 10
\fBpivmin\fR
.NL
\fBREAL\fR for \fBslaebz\fR
.IP
\fBDOUBLE PRECISION\fR for \fBdlaebz\fR. 
.IP
The minimum absolute value of a "pivot" in the Sturm sequence loop. This value \fBmust\fR be at least (max |e(j)**2|*\fIsafe\(ulmin\fR) and at least \fIsafe\(ulmin\fR, where \fIsafe\(ulmin\fR is at least the smallest number that can divide one without overflow.
.TP 10
\fBd\fR, \fBe\fR, \fBe2\fR
.NL
\fBREAL\fR for \fBslaebz\fR
.IP
\fBDOUBLE PRECISION\fR for \fBdlaebz\fR. 
.IP
Arrays, dimension (\fIn\fR) each. The array \fId\fR contains the diagonal elements of the tridiagonal matrix \fIT\fR.
.IP
The array \fIe\fR contains the off-diagonal elements of the tridiagonal matrix \fIT\fR in positions 1 through \fIn\fR-1. \fIe\fR(\fIn\fR)vis arbitrary.
.IP
The array \fIe2\fR contains the squares of the off-diagonal elements of the tridiagonal matrix \fIT\fR. \fIe2\fR(\fIn\fR) is ignored.
.TP 10
\fBnval\fR
.NL
\fBINTEGER\fR.
.IP
Array, dimension (\fIminp\fR).
.IP
If \fIijob\fR=1 or 2, not referenced. 
.IP
If \fIijob\fR=3, the desired values of \fIn\fR(\fIw\fR). 
.TP 10
\fBab\fR
.NL
\fBREAL\fR for \fBslaebz\fR
.IP
\fBDOUBLE PRECISION\fR for \fBdlaebz\fR. 
.IP
Array, dimension (\fImmax\fR,2) The endpoints of the intervals. \fIab\fR(j,1) is \fIa\fR(\fIj\fR), the left endpoint of the \fIj\fR-th interval, and \fIab\fR(j,2) is \fIb\fR(\fIj\fR), the right endpoint of the \fIj\fR-th interval. 
.TP 10
\fBc\fR
.NL
\fBREAL\fR for \fBslaebz\fR
.IP
\fBDOUBLE PRECISION\fR for \fBdlaebz\fR. 
.IP
Array, dimension (\fImmax\fR)
.IP
If \fIijob\fR=1, ignored. 
.IP
If \fIijob\fR=2, workspace. 
.IP
If \fIijob\fR=3, then on input \fIc\fR(\fIj\fR) should be initialized to the first search point in the binary search.
.TP 10
\fBnab\fR
.NL
\fBINTEGER\fR.
.IP
Array, dimension (\fImmax\fR,2) 
.IP
If \fIijob\fR=2, then on input, \fInab\fR(i,j) should be set. It must satisfy the condition:
.IP
\fIn\fR(\fIab\fR(i,1)) \(<= \fInab\fR(i,1) \(<= \fInab\fR(i,2) \(<= \fIn\fR(\fIab\fR(i,2)), which means that in interval i only eigenvalues \fInab\fR(i,1)+1,...,\fInab\fR(i,2) are considered. Usually, \fInab\fR(i,j)=\fIn\fR(\fIab\fR(i,j)), from a previous call to \fB?laebz\fR with \fIijob\fR=1. 
.IP
If \fIijob\fR=3, normally, \fInab\fR should be set to some distinctive value(s) before \fB?laebz\fR is called.
.TP 10
\fBwork\fR
.NL
\fBREAL\fR for \fBslaebz\fR
.IP
\fBDOUBLE PRECISION\fR for \fBdlaebz\fR. 
.IP
Workspace array, dimension (\fImmax\fR).
.TP 10
\fBiwork\fR
.NL
\fBINTEGER\fR.
.IP
Workspace array, dimension (\fImmax\fR).
.SH OUTPUT PARAMETERS

.TP 10
\fBnval\fR
.NL
The elements of \fInval\fR will be reordered to correspond with the intervals in \fIab\fR. Thus, \fInval\fR(\fIj\fR) on output will not, in general be the same as \fInval\fR(\fIj\fR) on input, but it will correspond with the interval (\fIab\fR(j,1),\fIab\fR(j,2)] on output.
.TP 10
\fBab\fR
.NL
The input intervals will, in general, be modified, split, and reordered by the calculation.
.TP 10
\fBmout\fR
.NL
\fBINTEGER\fR.
.IP
If \fIijob\fR=1, the number of eigenvalues in the intervals. 
.IP
If \fIijob\fR=2 or 3, the number of intervals output. 
.IP
If \fIijob\fR=3, \fImout\fR will equal \fIminp\fR.
.TP 10
\fBnab\fR
.NL
If \fIijob\fR=1, then on output \fInab\fR(i,j) will be set to \fIN\fR(\fIab\fR(i,j)).
.IP
If \fIijob\fR=2, then on output, \fInab\fR(i,j) will contain max(\fIna\fR(\fIk\fR, min(\fInb\fR(\fIk\fR), \fIN\fR(\fIab\fR(i,j)))), where \fIk\fR is the index of the input interval that the output interval (\fIab\fR(j,1),\fIab\fR(j,2)] came from, and \fIna\fR(\fIk\fR) and \fInb\fR(\fIk\fR) are the input values of \fInab\fR(\fIk\fR,1) and \fInab\fR(\fIk\fR,2).
.IP
If \fIijob\fR=3, then on output, \fInab\fR(i,j) contains \fIN\fR(\fIab\fR(i,j)), unless \fIN\fR(\fIw\fR) > \fInval\fR(i) for all search points \fIw\fR, in which case \fInab\fR(i,1) will not be modified, i.e., the output value will be the same as the input value (modulo reorderings, see \fInval\fR and \fIab\fR), or unless \fIN\fR(\fIw\fR) < \fInval\fR(i) for all search points \fIw\fR, in which case \fInab\fR(i,2) will not be modified. 
.TP 10
\fBinfo\fR
.NL
\fBINTEGER\fR.
.IP
If \fBinfo\fR = 0 - all intervals converged
.IP
If \fBinfo\fR = 1--\fBmmax\fR  - the last \fBinfo\fR interval did not converge.
.IP
If info = mmax+1   - more than \fBmmax\fR intervals were generated
