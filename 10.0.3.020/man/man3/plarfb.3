.\" Copyright (c) 2002 \- 2008 Intel Corporation
.\" All rights reserved.
.\"
.TH p?larfb 3 "Intel Corporation" "Copyright(C) 2002 \- 2008" "Intel(R) Math Kernel Library"
.SH NAME
p?larfb \- Applies a block reflector or its transpose/conjugate-transpose to a general rectangular matrix.
.SH SYNOPSIS
.PP
\fBcall pslarfb\fR(\fIside\fR, \fItrans\fR, \fIdirect\fR, \fIstorev\fR, \fIm\fR, \fIn\fR, \fIk\fR, \fIv\fR, \fIiv\fR, \fIjv\fR, \fIdescv\fR, \fIt\fR, \fIc\fR, \fIic\fR, \fIjc\fR, \fIdescc\fR, \fIwork\fR)
.PP
\fBcall pdlarfb\fR(\fIside\fR, \fItrans\fR, \fIdirect\fR, \fIstorev\fR, \fIm\fR, \fIn\fR, \fIk\fR, \fIv\fR, \fIiv\fR, \fIjv\fR, \fIdescv\fR, \fIt\fR, \fIc\fR, \fIic\fR, \fIjc\fR, \fIdescc\fR, \fIwork\fR)
.PP
\fBcall pclarfb\fR(\fIside\fR, \fItrans\fR, \fIdirect\fR, \fIstorev\fR, \fIm\fR, \fIn\fR, \fIk\fR, \fIv\fR, \fIiv\fR, \fIjv\fR, \fIdescv\fR, \fIt\fR, \fIc\fR, \fIic\fR, \fIjc\fR, \fIdescc\fR, \fIwork\fR)
.PP
\fBcall pzlarfb\fR(\fIside\fR, \fItrans\fR, \fIdirect\fR, \fIstorev\fR, \fIm\fR, \fIn\fR, \fIk\fR, \fIv\fR, \fIiv\fR, \fIjv\fR, \fIdescv\fR, \fIt\fR, \fIc\fR, \fIic\fR, \fIjc\fR, \fIdescc\fR, \fIwork\fR)
.SH INPUT PARAMETERS

.TP 10
\fBside\fR
.NL
(global).\fBCHARACTER\fR. 
.IP
if \fIside\fR = \fB\'L\'\fR: apply \fIQ\fR or \fIQ\fR**\fIT\fR for real flavors (\fIQ\fR**\fIH\fR for complex flavors) from the Left;
.IP
if \fIside\fR = \fB\'R\'\fR: apply \fIQ\fR or \fIQ\fR**\fIT\fRfor real flavors (\fIQ\fR**\fIH\fR for complex flavors) from the Right.
.TP 10
\fBtrans\fR
.NL
(global).\fBCHARACTER\fR. 
.IP
if \fItrans\fR = \fB\'N\'\fR:  no transpose, apply \fIQ\fR;
.IP
for real flavors, if \fItrans\fR=\fB\'T\'\fR: transpose, apply \fIQ\fR**\fIT\fR
.IP
for complex flavors, if \fItrans\fR = \fB\'C\'\fR: conjugate transpose, apply \fIQ\fR**\fIH\fR;
.TP 10
\fBdirect\fR
.NL
(global) \fBCHARACTER\fR.  Indicates how \fIQ\fR is formed from a product of elementary reflectors.
.IP
if \fIdirect\fR = \fB\'F\'\fR: \fIQ\fR = \fIH\fR(1)*\fIH\fR(2)*...*\fIH\fR(\fIk\fR) (Forward) 
.IP
if \fIdirect\fR = \fB\'B\'\fR: \fIQ\fR = \fIH\fR(\fIk\fR)*...*\fIH\fR(2)*\fIH\fR(1) (Backward)
.TP 10
\fBstorev\fR
.NL
(global) \fBCHARACTER\fR. 
.IP
Indicates how the vectors that define the elementary reflectors are stored:
.IP
if \fIstorev\fR = \fB\'C\'\fR: Columnwise 
.IP
if \fIstorev\fR = \fB\'R\'\fR: Rowwise.
.TP 10
\fBm\fR
.NL
(global) \fBINTEGER\fR. 
.IP
The number of rows to be operated on, that is, the number of rows of the distributed submatrix sub(\fIC\fR).  (\fIm\fR \(>= 0).
.TP 10
\fBn\fR
.NL
(global) \fBINTEGER\fR. 
.IP
The number of columns to be operated on, that is, the number of columns of the distributed submatrix sub(\fIC\fR). (\fIn\fR \(>= 0).
.TP 10
\fBk\fR
.NL
(global) \fBINTEGER\fR. 
.IP
The order of the matrix T.
.TP 10
\fBv\fR
.NL
(local). 
.IP
\fBREAL\fR for \fBpslarfb\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpdlarfb\fR
.IP
\fBCOMPLEX\fR for \fBpclarfb\fR
.IP
\fBCOMPLEX*16\fR for \fBpzlarfb\fR. 
.IP
Pointer into the local memory to an array of \fBDIMENSION\fR
.IP
(\fI  lld\(ulv\fR, \fILOCc\fR(\fIjv\fR+\fIk\fR-1)) if \fIstorev\fR = \fB\'C\'\fR, 
.IP
(\fIlld\(ulv\fR, \fILOCc\fR(\fIjv\fR+\fIm\fR-1)) if \fIstorev\fR = \fB\'R\'\fR and \fIside\fR = \fB\'L\'\fR, 
.IP
(\fIlld\(ulv\fR, \fILOCc\fR(\fIjv\fR+\fIn\fR-1) ) if \fIstorev\fR = \fB\'R\'\fR and \fIside\fR = \fB\'R\'\fR. 
.IP
It contains the local pieces of the distributed vectors \fIV\fR representing the Householder transformation. 
.IP
if \fIstorev\fR = \fB\'C\'\fR and \fIside\fR = \fB\'L\'\fR, \fIlld\(ulv\fR \(>= max(1,\fILOCr\fR(\fIiv+m-1\fR));
.IP
if \fIstorev\fR = \fB\'C\'\fR and \fIside\fR = \fB\'R\'\fR, \fIlld\(ulv\fR \(>= max(1,\fILOCr\fR(\fIiv+n-1\fR));
.IP
if \fIstorev\fR = \fB\'R\'\fR, \fIlld\(ulv\fR\(>=\fILOCr\fR(\fIjv\fR+\fIk\fR-1).
.TP 10
\fBiv\fR, \fBjv\fR
.NL
(global) \fBINTEGER\fR. 
.IP
The row and column indices in the global array \fIV\fR indicating the first row and the first column of the submatrix sub(\fIV\fR), respectively.
.TP 10
\fBdescv\fR
.NL
(global and local) \fBINTEGER\fR array, \fBDIMENSION\fR (\fIdlen\(ul\fR). The array descriptor for the distributed matrix \fIV\fR.
.TP 10
\fBc\fR
.NL
(local). 
.IP
\fBREAL\fR for \fBpslarfb\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpdlarfb\fR
.IP
\fBCOMPLEX\fR for \fBpclarfb\fR
.IP
\fBCOMPLEX*16\fR for \fBpzlarfb\fR. 
.IP
Pointer into the local memory to an array of \fBDIMENSION\fR(\fIlld\(ulc\fR, \fILOCc\fR(\fIjc\fR+\fIn\fR-1) ), containing the local pieces of sub(\fIC\fR).
.TP 10
\fBic\fR, \fBjc\fR
.NL
(global) \fBINTEGER\fR. The row and column indices in the global array \fIC\fR indicating the first row and the first column of the submatrix sub(\fIC\fR), respectively.
.TP 10
\fBdescc\fR
.NL
(global and local) \fBINTEGER\fR array, \fBDIMENSION\fR (\fIdlen\(ul\fR). The array descriptor for the distributed matrix \fIC\fR.
.TP 10
\fBwork\fR
.NL
(local)\fI.\fR
.IP
\fBREAL\fR for \fBpslarfb\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpdlarfb\fR
.IP
\fBCOMPLEX\fR for \fBpclarfb\fR
.IP
\fBCOMPLEX*16\fR for \fBpzlarfb\fR. 
.IP
Workspace array, \fBDIMENSION\fR (\fIlwork\fR). 
.IP
If \fIstorev\fR = \fB\'C\'\fR, 
.IP
  if \fIside\fR = \fB\'L\'\fR,
.IP
    \fIlwork\fR\(>= ( \fInqc\fR0 +  \fImpc\fR0 ) * \fIk\fR
.IP
  else if  \fIside\fR = \fB\'R\'\fR,
.IP
    \fIlwork \fR\(>= ( \fInqc\fR0 + \fBmax\fR( \fInpv\fR0 + \fBnumroc\fR( \fBnumroc\fR( \fIn\fR +
.IP
      \fIicoffc\fR,\fInb\(ulv\fR, 0, 0, \fInpcol\fR ), \fInb\(ulv\fR, 0, 0, \fIlcmq\fR ),
.IP
      \fImpc\fR0 ) ) * \fIk\fR
.IP
  end if 
.IP
else if \fIstorev\fR = \fB\'R\'\fR ,
.IP
  if \fIside\fR = \fB\'L\'\fR ,
.IP
    \fIlwork\fR\(>= ( \fImpc\fR0 + \fBmax\fR( \fImqv\fR0 + \fBnumroc\fR( \fBnumroc\fR( \fIm\fR +
.IP
    \fIiroffc\fR,\fImb\(ulv\fR, 0, 0, \fInprow\fR ), \fImb\(ulv\fR, 0, 0, \fIlcmp\fR ),
.IP
    \fInqc\fR0 ) ) * \fIk\fR
.IP
  else if \fIside\fR = \fB\'R\'\fR,
.IP
    \fIlwork \fR\(>= ( \fImpc\fR0 + \fInqc\fR0 ) * \fIk\fR
.IP
  end if
.IP
end if,
.IP
where 
.IP
\fIlcmq\fR = \fIlcm\fR / \fInpcol\fR with \fIlcm\fR = \fBiclm\fR( \fInprow\fR, \fInpcol\fR ),
.IP
\fIiroffv\fR = \fBmod\fR( \fIiv\fR-1, \fImb\(ulv\fR ), \fIicoffv\fR = \fBmod\fR( \fIjv\fR-1, \fInb\(ulv\fR ),
.IP
\fIivrow\fR = \fBindxg2p\fR( \fIiv\fR, \fImb\(ulv\fR, \fImyrow\fR, \fIrsrc\(ulv\fR, \fInprow\fR ),
.IP
\fIivcol\fR = \fBindxg2p\fR\fB\fR( \fIjv\fR, \fInb\(ulv\fR, \fImycol\fR, \fIcsrc\(ulv\fR, \fInpcol\fR ),
.IP
\fIMqV0\fR = \fBnumroc\fR( \fIm\fR+\fIicoffv\fR, \fInb\(ulv\fR, \fImycol\fR, \fIivcol\fR, \fInpcol\fR ),
.IP
\fINpV0\fR = \fBnumroc\fR( \fIn\fR+\fIiroffv\fR, \fImb\(ulv\fR, \fImyrow\fR, \fIivrow\fR, \fInprow\fR ),
.IP
\fIiroffc\fR = mod( \fIic\fR-1, \fImb\(ulc\fR ), \fIicoffc\fR = \fBmod\fR( \fIjc\fR-1, \fInb\(ulc\fR ),
.IP
\fIicrow\fR = indxg2p\fB\fR( \fIic\fR, \fImb\(ulc\fR, \fImyrow\fR, \fIrsrc\fR\(ulc, \fInprow\fR ),
.IP
\fIiccol\fR = \fBindxg2p\fR( \fIjc\fR, \fInb\(ulc\fR, \fImycol\fR, \fIcsrc\fR\(ulc, \fInpcol\fR ),
.IP
\fIMpC0\fR = \fBnumroc\fR( \fIm\fR+\fIiroffc\fR, \fImb\(ulc\fR, \fImyrow\fR, \fIicrow\fR, \fInprow\fR ),
.IP
\fINpC0\fR = \fBnumroc\fR( \fIn\fR+\fIicoffc\fR, \fImb\(ulc\fR, \fImyrow\fR, \fIicrow\fR, \fInprow\fR ),
.IP
\fINqC0\fR = \fBnumroc\fR( \fIn\fR+\fIicoffc\fR, \fInb\(ulc\fR, \fImycol\fR, \fIiccol\fR, \fInpcol\fR ),
.IP
\fBilcm\fR, \fBindxg2p\fR, and \fBnumroc\fR are ScaLAPACK tool functions; \fImyrow\fR, \fImycol\fR, \fInprow\fR, and \fInpcol\fR can be determined by calling the subroutine \fBblacs\(ulgridinfo\fR. 
.SH OUTPUT PARAMETERS

.TP 10
\fBt\fR
.NL
(local). 
.IP
\fBREAL\fR for \fBpslarfb\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpdlarfb\fR
.IP
\fBCOMPLEX\fR for \fBpclarfb\fR
.IP
\fBCOMPLEX*16\fR for \fBpzlarfb\fR. 
.IP
Array, \fBDIMENSION\fR( \fImb\(ulv\fR, \fImb\(ulv\fR) if \fIstorev\fR = \fB\'R\',\fR and ( \fInb\(ulv\fR, \fInb\(ulv\fR) if \fIstorev\fR = \fB\'C\'\fR. The triangular matrix \fIt\fR is the representation of the block reflector.
.TP 10
\fBc\fR
.NL
(local). 
.IP
On exit, sub(\fIC\fR) is overwritten by the \fIQ\fR*sub(\fIC\fR), or \fIQ\'\fR*sub(\fIC\fR), or sub(\fIC\fR)*\fIQ\fR, or sub(\fIC\fR)*\fIQ\'\fR. \fIQ\'\fR is transpose (conjugate transpose) of \fIQ\fR.
