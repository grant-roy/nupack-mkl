.\" Copyright (c) 2002 \- 2008 Intel Corporation
.\" All rights reserved.
.\"
.TH ?tgevc 3 "Intel Corporation" "Copyright(C) 2002 \- 2008" "Intel(R) Math Kernel Library"
.SH NAME
?tgevc \- Computes some or all of the right and/or left generalized eigenvectors of a pair of upper triangular matrices.
.SH SYNOPSIS
.PP
.B Fortran 77
.PP
\fBcall stgevc\fR(\fIside\fR, \fIhowmny\fR, \fIselect\fR, \fIn\fR, \fIs\fR, \fIlds\fR, \fIp\fR, \fIldp\fR, \fIvl\fR, \fIldvl\fR, \fIvr\fR, \fIldvr\fR, \fImm\fR, \fIm\fR, \fIwork\fR, \fIinfo\fR)
.PP
\fBcall dtgevc\fR(\fIside\fR, \fIhowmny\fR, \fIselect\fR, \fIn\fR, \fIs\fR, \fIlds\fR, \fIp\fR, \fIldp\fR, \fIvl\fR, \fIldvl\fR, \fIvr\fR, \fIldvr\fR, \fImm\fR, \fIm\fR, \fIwork\fR, \fIinfo\fR)
.PP
\fBcall ctgevc\fR(\fIside\fR, \fIhowmny\fR, \fIselect\fR, \fIn\fR, \fIs\fR, \fIlds\fR, \fIp\fR, \fIldp\fR, \fIvl\fR, \fIldvl\fR, \fIvr\fR, \fIldvr\fR, \fImm\fR, \fIm\fR, \fIwork\fR, \fIrwork\fR, \fIinfo\fR)
.PP
\fBcall ztgevc\fR(\fIside\fR, \fIhowmny\fR, \fIselect\fR, \fIn\fR, \fIs\fR, \fIlds\fR, \fIp\fR, \fIldp\fR, \fIvl\fR, \fIldvl\fR, \fIvr\fR, \fIldvr\fR, \fImm\fR, \fIm\fR, \fIwork\fR, \fIrwork\fR, \fIinfo\fR)
.PP
.B Fortran 95
.PP
\fBcall tgevc\fR(\fIs\fR, \fIp\fR[,\fIhowmny\fR] [,\fIselect\fR] [,\fIvl\fR] [,\fIvr\fR] [,\fIm\fR] [,\fIinfo\fR])
.SH INPUT PARAMETERS

.TP 10
\fBside\fR
.NL
\fBCHARACTER*1\fR. Must be \fB\'R\'\fR, \fB\'L\'\fR, or \fB\'B\'\fR. 
.IP
If \fIside\fR = \fB\'R\'\fR , compute right eigenvectors only. 
.IP
If \fIside\fR = \fB\'L\'\fR , compute left eigenvectors only. 
.IP
If \fIside\fR = \fB\'B\'\fR, compute both right and left eigenvectors.
.TP 10
\fBhowmny\fR
.NL
\fBCHARACTER*1\fR. Must be \fB\'A\'\fR , \fB\'B\'\fR, or \fB\'S\'\fR. 
.IP
If \fIhowmny\fR = \fB\'A\'\fR , compute all right and/or left eigenvectors. 
.IP
If \fIhowmny\fR = \fB\'B\'\fR , compute all right and/or left eigenvectors, backtransformed by the matrices in \fIvr\fR and/or \fIvl\fR. 
.IP
If \fIhowmny\fR = \fB\'S\'\fR , compute selected right and/or left eigenvectors, specified by the logical array \fIselect\fR.
.TP 10
\fBselect\fR
.NL
\fBLOGICAL\fR. 
.IP
Array, \fBDIMENSION\fR at least max (1, \fIn\fR). 
.IP
If \fIhowmny\fR = \fB\'S\'\fR, \fIselect\fR specifies the eigenvectors to be computed. 
.IP
If \fIhowmny\fR = \fB\'A\'\fRor \fB\'B\'\fR, \fIselect\fR is not referenced.
.IP
\fIFor real flavors\fR:
.IP
If \fIomega\fR(\fIj\fR) is a real eigenvalue, the corresponding real eigenvector is computed if \fIselect\fR(\fIj\fR) is \fB.TRUE.\fR. 
.IP
If \fIomega\fR(\fIj\fR) and \fIomega\fR(\fIj\fR+1) are the real and imaginary parts of a complex eigenvalue, the corresponding complex eigenvector is computed if either \fIselect\fR(\fIj\fR) or \fIselect\fR(\fIj\fR+1) is \fB.TRUE.\fR, and on exit \fIselect\fR(\fIj\fR) is set to \fB.TRUE.\fRand \fIselect\fR(\fIj\fR+1) is set to \fB.FALSE.\fR.
.IP
\fIFor complex flavors:\fR
.IP
The eigenvector corresponding to the \fIj\fR-th eigenvalue is computed if \fIselect\fR(\fIj\fR) is \fB.TRUE.\fR. 
.TP 10
\fBn\fR
.NL
\fBINTEGER\fR. The order of the matrices \fIS\fR and \fIP\fR (\fIn\fR\(>= 0).
.TP 10
\fBs\fR, \fBp\fR, \fBvl\fR, \fBvr\fR, \fBwork\fR
.NL
\fBREAL\fR for \fBstgevc\fR
.IP
\fBDOUBLE PRECISION\fR for \fBdtgevc\fR
.IP
\fBCOMPLEX\fR for \fBctgevc\fR
.IP
\fBDOUBLE COMPLEX\fR for \fBztgevc\fR. 
.IP
Arrays: 
.IP
\fIs\fR(\fIlds\fR,*) contains the matrix \fIS\fR from a generalized Schur factorization as computed by \fB?hgeqz\fR. This matrix is upper quasi-triangular for real flavors, and upper triangular for complex flavors. 
.IP
The second dimension of \fIs\fR must be at least max(1, \fIn\fR).
.IP
\fIp\fR(\fIldp\fR,*) contains the upper triangular matrix \fIP\fR from a generalized Schur factorization as computed by \fB?hgeqz\fR.
.IP
For real flavors, 2-by-2 diagonal blocks of \fIP\fR corresponding to 2-by-2 blocks of \fIS\fR must be in positive diagonal form.
.IP
For complex flavors, \fIP\fR must have real diagonal elements. The second dimension of \fIp\fR must be at least max(1, \fIn\fR).
.IP
If \fIside\fR = \fB\'L\'\fR or \fB\'B\'\fR and \fIhowmny\fR = \fB\'B\'\fR, \fIvl\fR(\fIldvl\fR,*) must contain an \fIn\fR-by-\fIn\fR matrix \fIQ\fR (usually the orthogonal/unitary matrix \fIQ\fR of left Schur vectors returned by \fB?hgeqz\fR). The second dimension of \fIvl\fR must be at least max(1, \fImm\fR). 
.IP
If \fIside\fR = \fB\'R\'\fR\fI, vl\fR is not referenced.
.IP
If \fIside\fR = \fB\'R\'\fR or \fB\'B\'\fR and \fIhowmny\fR = \fB\'B\'\fR, \fIvr\fR(\fIldvr\fR,*) must contain an \fIn\fR-by-\fIn\fR matrix \fIZ\fR (usually the orthogonal/unitary matrix \fIZ\fR of right Schur vectors returned by \fB?hgeqz\fR). The second dimension of \fIvr\fR must be at least max(1, \fImm\fR). 
.IP
If \fIside\fR = \fB\'L\'\fR, \fIvr\fR is not referenced.
.IP
\fIwork\fR(*) is a workspace array.
.IP
\fBDIMENSION\fR at least max (1, 6*\fIn\fR) for real flavors and at least max (1, 2*\fIn\fR) for complex flavors.
.TP 10
\fBlds\fR
.NL
\fBINTEGER\fR. The first dimension of \fIs\fR; at least max(1, \fIn\fR).
.TP 10
\fBldp\fR
.NL
\fBINTEGER\fR. The first dimension of \fIp\fR; at least max(1, \fIn\fR).
.TP 10
\fBldvl\fR
.NL
\fBINTEGER\fR. The first dimension of \fIvl\fR; 
.IP
If \fIside\fR = \fB\'L\'\fR or \fB\'B\'\fR, then \fIldvl\fR\(>=\fIn\fR. 
.IP
If \fIside\fR = \fB\'R\'\fR, then \fIldvl\fR\(>= 1.
.TP 10
\fBldvr\fR
.NL
\fBINTEGER\fR. The first dimension of \fIvr\fR; 
.IP
If \fIside\fR = \fB\'R\'\fR or \fB\'B\'\fR, then \fIldvr\fR\(>=\fIn\fR. 
.IP
If \fIside\fR = \fB\'L\'\fR, then \fIldvr\fR\(>= 1.
.TP 10
\fBmm\fR
.NL
\fBINTEGER\fR. The number of columns in the arrays \fIvl\fR and/or \fIvr\fR (\fImm\fR\(>=\fIm\fR). 
.TP 10
\fBrwork\fR
.NL
\fBREAL\fR for \fBctgevc DOUBLE PRECISION\fR for \fBztgevc\fR. Workspace array, \fBDIMENSION\fR at least max (1, 2*\fIn\fR). Used in complex flavors only.
.SH OUTPUT PARAMETERS

.TP 10
\fBvl\fR
.NL
On exit, if \fIside\fR = \fB\'L\'\fR or \fB\'B\'\fR, \fIvl\fR contains: 
.IP
if \fIhowmny\fR = \fB\'A\'\fR, the matrix \fIY\fR of left eigenvectors of (\fIS\fR,\fIP\fR);
.IP
if \fIhowmny\fR = \fB\'B\'\fR, the matrix \fIQ\fR*\fIY\fR; 
.IP
if \fIhowmny\fR = \fB\'S\'\fR, the left eigenvectors of (\fIS\fR,\fIP\fR) specified by \fIselect\fR, stored consecutively in the columns of \fIvl\fR, in the same order as their eigenvalues.
.IP
\fIFor real flavors\fR:
.IP
A complex eigenvector corresponding to a complex eigenvalue is stored in two consecutive columns, the first holding the real part, and the second the imaginary part.
.TP 10
\fBvr\fR
.NL
On exit, if \fIside\fR = \fB\'R\'\fR or \fB\'B\'\fR, \fIvr\fR contains: 
.IP
if \fIhowmny\fR = \fB\'A\'\fR, the matrix \fIX\fR of right eigenvectors of (\fIS\fR,\fIP\fR);
.IP
if \fIhowmny\fR = \fB\'B\'\fR, the matrix \fIZ\fR*\fIX\fR; 
.IP
if \fIhowmny\fR = \fB\'S\'\fR, the right eigenvectors of (\fIS\fR,\fIP\fR) specified by \fIselect\fR, stored consecutively in the columns of \fIvr\fR, in the same order as their eigenvalues.
.IP
\fIFor real flavors\fR:
.IP
A complex eigenvector corresponding to a complex eigenvalue is stored in two consecutive columns, the first holding the real part, and the second the imaginary part.
.TP 10
\fBm\fR
.NL
\fBINTEGER\fR. The number of columns in the arrays \fIvl\fR and/or \fIvr\fR actually used to store the eigenvectors. 
.IP
If \fIhowmny\fR = \fB\'A\'\fR or \fB\'B\'\fR, \fIm\fR is set to \fIn\fR. 
.IP
\fIFor real flavors\fR:
.IP
Each selected real eigenvector occupies one column and each selected complex eigenvector occupies two columns.
.IP
\fIFor complex flavors\fR:
.IP
Each selected eigenvector occupies one column. 
.TP 10
\fBinfo\fR
.NL
\fBINTEGER\fR. 
.IP
If \fIinfo\fR = 0, the execution is successful.
.IP
If \fIinfo\fR = \fI-i\fR, the \fIi-\fRth parameter had an illegal value.
.IP
\fIFor real flavors\fR:
.IP
if \fIinfo\fR = \fIi\fR>0, the 2-by-2 block (\fIi\fR:\fIi\fR+1) does not have a complex eigenvalue.
.SH FORTRAN 95 INTERFACE NOTES
.PP
.PP
Routines in Fortran 95 interface have fewer arguments in the calling sequence than their Fortran 77 counterparts. For general conventions applied to skip redundant or restorable arguments, see Fortran 95  Interface Conventions.
.PP
Specific details for the routine \fBtgevc\fR interface are the following:
.TP 10
\fBs\fR
.NL
Holds the matrix \fIS\fR of size (\fIn,n\fR).
.TP 10
\fBp\fR
.NL
Holds the matrix \fIP\fR of size (\fIn,n\fR).
.TP 10
\fBselect\fR
.NL
Holds the vector of length (\fIn\fR).
.TP 10
\fBvl\fR
.NL
Holds the matrix \fIVL\fR of size (\fIn,mm\fR).
.TP 10
\fBvr\fR
.NL
Holds the matrix \fIVR\fR of size (\fIn,mm\fR).
.TP 10
\fBside\fR
.NL
Restored based on the presence of arguments \fIvl\fR and \fIvr\fR as follows: 
.IP
\fIside\fR = \fB\'B\'\fR, if both \fIvl\fR and \fIvr\fR are present, 
.IP
\fIside\fR = \fB\'L\'\fR, if \fIvl\fR is present and \fIvr\fR omitted, 
.IP
\fIside\fR = \fB\'R\'\fR, if \fIvl\fR is omitted and \fIvr\fR present, 
.IP
Note that there will be an error condition if both \fIvl\fR and \fIvr\fR are omitted.
.TP 10
\fBhowmny\fR
.NL
If omitted, this argument is restored based on the presence of argument \fIselect\fR as follows: 
.IP
\fIhowmny\fR = \fB\'S\'\fR, if \fIselect\fR is present, 
.IP
\fIhowmny\fR = \fB\'A\'\fR, if \fIselect\fR is omitted. 
.IP
If present, \fIhowmny\fR must be equal to \fB\'A\'\fR or \fB\'B\'\fR and the argument \fIselect\fR must be omitted. 
.IP
Note that there will be an error condition if both \fIhowmny\fR and \fIselect\fR are present.
