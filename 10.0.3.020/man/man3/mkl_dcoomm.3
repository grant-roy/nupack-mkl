.\" Copyright (c) 2002 \- 2008 Intel Corporation
.\" All rights reserved.
.\"
.TH mkl\(uldcoomm 3 "Intel Corporation" "Copyright(C) 2002 \- 2008" "Intel(R) Math Kernel Library"
.SH NAME
mkl\(uldcoomm \- Computes matrix-matrix product of a sparse matrix stored in the coordinate format.
.SH SYNOPSIS
.PP
.B ! Fortran
.PP
\fBcall mkl\(uldcoomm\fR(\fItransa\fR, \fIm\fR, \fIn\fR, \fIk\fR, \fIalpha\fR, \fImatdescra\fR, \fIval\fR, \fIrowind\fR, \fIcolind\fR, \fInnz\fR, \fIb\fR, \fIldb\fR, \fIbeta\fR, \fIc\fR, \fIldc\fR)
.PP
.B /* C */
.PP
\fBmkl\(uldcoomm\fR(\fI&transa\fR, \fI&m\fR, \fI&n\fR, \fI&k\fR, \fI&alpha\fR, \fImatdescra\fR, \fIval\fR, \fIrowind\fR, \fIcolind\fR, \fI&nnz\fR, \fIb\fR, \fI&ldb\fR, \fI&beta\fR, \fIc\fR, \fI&ldc\fR);
.SH INPUT PARAMETERS
.PP
Parameter descriptions are common for all implemented interfaces with the exception of data types that refer here to the Fortran 77 standard types. Data types specific to the different interfaces are described in the section \fB``Interfaces''\fR below.
.TP 10
\fBtransa\fR
.NL
\fBCHARACTER*1\fR. Specifies the operation.
.IP
If \fItransa\fR = \fB\'N\'\fR or \fB\'n\'\fR, then  \fIC\fR := \fIalpha\fR*\fIA\fR*\fIB\fR + \fIbeta\fR*\fIC\fR
.IP
If \fItransa\fR = \fB\'T\'\fR or \fB\'t\'\fR or \fB\'C\'\fR or \fB\'c\'\fR, then  \fIC\fR := \fIalpha\fR*\fIA\'\fR*\fIB\fR + \fIbeta\fR*\fIC\fR,
.TP 10
\fBm\fR
.NL
\fBINTEGER\fR. Number of rows of the matrix \fIA\fR.
.TP 10
\fBn\fR
.NL
\fBINTEGER\fR. Number of columns of the matrix \fIC\fR.
.TP 10
\fBk\fR
.NL
\fBINTEGER\fR. Number of columns of the matrix \fIA\fR.
.TP 10
\fBalpha\fR
.NL
\fBREAL*8\fR. Specifies the scalar \fIalpha\fR. 
.TP 10
\fBmatdescra\fR
.NL
\fBCHARACTER\fR. Array of six elements, specifies properties of the matrix used for operation. Only first four array elements are used, their possible values are given in the ``Possible Values of the Parameter \fImatdescra\fR (\fIdescra\fR)''.
.TP 10
\fBval\fR
.NL
\fBREAL*8\fR. Array of length \fInnz\fR, contains non-zero elements of the matrix \fIA\fR in the arbitrary order.
.IP
Refer to \fIvalues\fR array description in Coordinate Format for more details.
.TP 10
\fBrowind\fR
.NL
\fBINTEGER\fR. Array of length \fInnz\fR, contains the row indices for each non-zero element of the matrix \fIA\fR.
.IP
Refer to \fIrows\fR array description in Coordinate Format for more details.
.TP 10
\fBcolind\fR
.NL
\fBINTEGER\fR. Array of length \fInnz\fR, contains the column indices for each non-zero element of the matrix \fIA\fR. Refer to \fIcolumns\fR array description in Coordinate Format for more details.
.TP 10
\fBnnz\fR
.NL
\fBINTEGER\fR. Specifies the number of non-zero element of the matrix \fIA\fR.
.IP
Refer to \fInnz\fR description in Coordinate Format for more details.
.TP 10
\fBb\fR
.NL
\fBREAL*8\fR. 
.IP
Array, \fBDIMENSION\fR(\fIldb\fR, \fIn\fR) for one-based indexing, and  (\fIm\fR, \fIldb\fR) for zero-based indexing.
.IP
On entry with \fItransa\fR = \fB\'N\'\fR or \fB\'n\'\fR, the leading \fIk\fR-by-\fIn\fR part of the array \fIb\fR must contain the matrix \fIB\fR, otherwise the leading \fIm\fR-by-\fIn\fR part of the array \fIb\fR must contain the matrix \fIB\fR.
.TP 10
\fBldb\fR
.NL
\fBINTEGER\fR. Specifies the first dimension of \fIb\fR for one-based indexing, and the second dimension of \fIb\fR for zero-based indexing, as declared in the calling (sub)program.
.TP 10
\fBbeta\fR
.NL
\fBREAL*8\fR. Specifies the scalar \fIbeta\fR. 
.TP 10
\fBc\fR
.NL
\fBREAL*8\fR. 
.IP
Array, \fBDIMENSION\fR (\fIldc\fR, \fIn\fR) for one-based indexing, and  (\fIm\fR, \fIldc\fR) for zero-based indexing.
.IP
On entry, the leading \fIm\fR-by-\fIn\fR part of the array \fIc\fR must contain the matrix \fIC\fR, otherwise the leading \fIk\fR-by-\fIn\fR part of the array \fIc\fR must contain the matrix \fIC\fR.
.TP 10
\fBldc\fR
.NL
\fBINTEGER\fR. Specifies the first dimension of \fIc\fR for one-based indexing, and the second dimension of \fIc\fR for zero-based indexing, as declared in the calling (sub)program.
.SH OUTPUT PARAMETERS

.TP 10
\fBc\fR
.NL
Overwritten by the matrix (\fIalpha\fR*\fIA\fR*\fIB\fR + \fIbeta\fR*\fIC\fR) or (\fIalpha\fR*\fIA\'\fR*\fIB\fR + \fIbeta\fR*\fIC\fR).
.SH INTERFACES
.PP

.PP
\fBFortran 77:\fR
.br
SUBROUTINE mkl\(uldcoomm(transa, m, n, k, alpha, matdescra, val,
.br
rowind, colind, nnz, b, ldb, beta, c, ldc)
.br
CHARACTER*1   transa
.br
CHARACTER     matdescra(*)
.br
INTEGER       m, n, k, ldb, ldc, nnz
.br
INTEGER       rowind(*), colind(*)
.br
REAL*8        alpha, beta
.br
REAL*8        val(*), b(ldb,*), c(ldc,*)
.PP
\fBC:\fR
.br
.PP
.br
void mkl\(uldcoomm(char \fI*transa\fR, int \fI*m\fR, int \fI*n\fR, int \fI*k\fR, double \fI*alpha\fR,
.br
.br
char \fI*matdescra\fR, double  \fI*val\fR, int \fI*rowind\fR, int \fI*colind\fR, int \fI*nnz\fR,
.br
double \fI*b\fR, int \fI*ldb\fR, double \fI*beta\fR, double \fI*c\fR, int \fI*ldc\fR);
