.\" Copyright (c) 2002 \- 2008 Intel Corporation
.\" All rights reserved.
.\"
.TH p?larzb 3 "Intel Corporation" "Copyright(C) 2002 \- 2008" "Intel(R) Math Kernel Library"
.SH NAME
p?larzb \- Applies a block reflector or its transpose/conjugate-transpose as returned by \fBp?tzrzf\fR to a general matrix.
.SH SYNOPSIS
.PP
\fBcall pslarzb\fR(\fIside\fR, \fItrans\fR, \fIdirect\fR, \fIstorev\fR, \fIm\fR, \fIn\fR, \fIk\fR, \fIl\fR, \fIv\fR, \fIiv\fR, \fIjv\fR, \fIdescv\fR, \fIt\fR, \fIc\fR, \fIic\fR, \fIjc\fR, \fIdescc\fR, \fIwork\fR)
.PP
\fBcall pdlarzb\fR(\fIside\fR, \fItrans\fR, \fIdirect\fR, \fIstorev\fR, \fIm\fR, \fIn\fR, \fIk\fR, \fIl\fR, \fIv\fR, \fIiv\fR, \fIjv\fR, \fIdescv\fR, \fIt\fR, \fIc\fR, \fIic\fR, \fIjc\fR, \fIdescc\fR, \fIwork\fR)
.PP
\fBcall pclarzb\fR(\fIside\fR, \fItrans\fR, \fIdirect\fR, \fIstorev\fR, \fIm\fR, \fIn\fR, \fIk\fR, \fIl\fR, \fIv\fR, \fIiv\fR, \fIjv\fR, \fIdescv\fR, \fIt\fR, \fIc\fR, \fIic\fR, \fIjc\fR, \fIdescc\fR, \fIwork\fR)
.PP
\fBcall pzlarzb\fR(\fIside\fR, \fItrans\fR, \fIdirect\fR, \fIstorev\fR, \fIm\fR, \fIn\fR, \fIk\fR, \fIl\fR, \fIv\fR, \fIiv\fR, \fIjv\fR, \fIdescv\fR, \fIt\fR, \fIc\fR, \fIic\fR, \fIjc\fR, \fIdescc\fR, \fIwork\fR)
.SH INPUT PARAMETERS

.TP 10
\fBside\fR
.NL
(global) \fBCHARACTER\fR. 
.IP
if \fIside\fR = \fB\'L\'\fR: apply \fIQ\fR or \fIQ\fR**\fIT\fR (\fIQ\fR**\fIH\fR for complex flavors) from the Left;
.IP
if \fIside\fR = \fB\'R\'\fR: apply \fIQ\fR or \fIQ\fR**\fIT\fR (\fIQ\fR**\fIH\fR for complex flavors) from the Right.
.TP 10
\fBtrans\fR
.NL
(global) \fBCHARACTER\fR. 
.IP
if \fItrans\fR = \fB\'N\'\fR:  No transpose, apply \fIQ\fR; 
.IP
If \fItrans\fR=\fB\'T\'\fR:  Transpose, apply \fIQ\fR**\fIT\fR (real flavors); 
.IP
If \fItrans\fR=\fB\'C\'\fR:  Conjugate transpose, apply \fIQ\fR**\fIH\fR (complex flavors).
.TP 10
\fBdirect\fR
.NL
(global) \fBCHARACTER\fR. 
.IP
Indicates how \fIH\fR is formed from a product of elementary reflectors.
.IP
if \fIdirect\fR = \fB\'F\'\fR: \fIH\fR = \fIH\fR(1)*\fIH\fR(2)*...*\fIH\fR(\fIk\fR)  - forward (not supported) ;
.IP
if \fIdirect\fR = \fB\'B\'\fR: \fIH\fR = \fIH\fR(\fIk\fR)*...*\fIH\fR(2)*\fIH\fR(1) - backward.
.TP 10
\fBstorev\fR
.NL
(global) \fBCHARACTER\fR. 
.IP
Indicates how the vectors that define the elementary reflectors are stored:
.IP
if \fIstorev\fR = \fB\'C\'\fR: columnwise (not supported ). 
.IP
if \fIstorev\fR = \fB\'R\'\fR: rowwise.
.TP 10
\fBm\fR
.NL
(global) \fBINTEGER\fR. 
.IP
The number of rows to be operated on, that is, the number of rows of the distributed submatrix sub(\fIC\fR).  (\fIm\fR \(>= 0).
.TP 10
\fBn\fR
.NL
(global) \fBINTEGER\fR. 
.IP
The number of columns to be operated on, that is, the number of columns of the distributed submatrix sub(\fIC\fR). (\fIn \fR\(>= 0).
.TP 10
\fBk\fR
.NL
(global) \fBINTEGER\fR. 
.IP
The order of the matrix \fIT\fR. (= the number of elementary reflectors whose product defines the block reflector).
.TP 10
\fBl\fR
.NL
(global) \fBINTEGER\fR. 
.IP
The columns of the distributed submatrix sub(\fIA\fR) containing the meaningful part of the Householder reflectors.
.IP
If \fIside\fR = \fB\'L\'\fR, \fIm \fR\(>= \fIl\fR \(>= 0, 
.IP
if \fIside\fR = \fB\'R\'\fR, \fIn\fR \(>= \fIl \fR\(>= 0.
.TP 10
\fBv\fR
.NL
(local).
.IP
\fBREAL\fR for \fBpslarzb\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpdlarzb\fR
.IP
\fBCOMPLEX\fR for \fBpclarzb\fR
.IP
\fBCOMPLEX*16\fR for \fBpzlarzb\fR. 
.IP
Pointer into the local memory to an array of \fBDIMENSION\fR(\fIlld\(ulv\fR, \fILOCc\fR(\fIjv\fR+\fIm\fR-1)) if \fIside\fR = \fB\'L\'\fR, (\fIlld\(ulv\fR, \fILOCc\fR(\fIjv\fR+\fIm\fR-1)) if \fIside\fR = \fB\'R\'\fR. 
.IP
It contains the local pieces of the distributed vectors \fIV\fR representing the Householder transformation as returned by \fBp?tzrzf\fR. 
.IP
\fIlld\(ulv\fR \(>=\fI LOCr\fR(\fIiv\fR+\fIk\fR-1).
.TP 10
\fBiv\fR, \fBjv\fR
.NL
(global) \fBINTEGER\fR. 
.IP
The row and column indices in the global array \fIV\fR indicating the first row and the first column of the submatrix sub(\fIV\fR), respectively.
.TP 10
\fBdescv\fR
.NL
(global and local) \fBINTEGER\fR array, \fBDIMENSION\fR (\fIdlen\(ul\fR). The array descriptor for the distributed matrix \fIV\fR.
.TP 10
\fBt\fR
.NL
(local)
.IP
\fBREAL\fR for \fBpslarzb\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpdlarzb\fR
.IP
\fBCOMPLEX\fR for \fBpclarzb\fR
.IP
\fBCOMPLEX*16\fR for \fBpzlarzb\fR. 
.IP
Array, \fBDIMENSION \fR\fImb\(ulv\fR by \fImb\(ulv\fR.
.IP
The lower triangular matrix \fIT\fR in the representation of the block reflector.
.TP 10
\fBc\fR
.NL
(local). 
.IP
\fBREAL\fR for \fBpslarfb\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpdlarfb\fR
.IP
\fBCOMPLEX\fR for \fBpclarfb\fR
.IP
\fBCOMPLEX*16\fR for \fBpzlarfb\fR. 
.IP
Pointer into the local memory to an array of \fBDIMENSION\fR(\fIlld\(ulc\fR, \fILOCc\fR(\fIjc\fR+\fIn\fR-1)).
.IP
On entry, the \fIm\fR-by-\fIn\fR distributed matrix sub(\fIC\fR).
.TP 10
\fBic\fR, \fBjc\fR
.NL
(global) \fBINTEGER\fR. 
.IP
The row and column indices in the global array \fIc\fR indicating the first row and the first column of the submatrix sub(\fIC\fR), respectively.
.TP 10
\fBdescc\fR
.NL
(global and local) \fBINTEGER\fR array, \fBDIMENSION\fR (\fIdlen\(ul\fR). The array descriptor for the distributed matrix \fIC\fR.
.TP 10
\fBwork\fR
.NL
(local). 
.IP
\fBREAL\fR for \fBpslarzb\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpdlarzb\fR
.IP
\fBCOMPLEX\fR for \fBpclarzb\fR
.IP
\fBCOMPLEX*16\fR for \fBpzlarzb\fR. 
.IP
Array, \fBDIMENSION\fR (\fIlwork\fR). If \fIstorev\fR = \fB\'C\'\fR ,
.br
  if \fIside\fR = \fB\'L\'\fR ,
.br
    \fIlwork\fR \(>=(\fInqc\fR0 + \fImpc\fR0)* \fIk\fR
.br
  else if \fIside\fR = \fB\'R\'\fR ,
.br
    \fIlwork \fR\(>= (\fInqc\fR0 + \fBmax\fR(\fInpv\fR0 + \fBnumroc\fR(\fBnumroc\fR(\fIn\fR+\fIicoffc\fR, \fInb\(ulv\fR, 0, 0, \fInpcol\fR),
.br
           \fInb\(ulv\fR, 0, 0, \fIlcmq\fR), \fImpc\fR0))* \fIk\fR
.br
  end if
.br
else if \fIstorev\fR = \fB\'R\'\fR ,
.br
  if \fIside\fR = \fB\'L\'\fR ,
.br
    \fIlwork\fR \(>= (\fImpc\fR0 + \fBmax\fR(\fImqv\fR0 + \fBnumroc\fR(\fBnumroc\fR(\fIm\fR+\fIiroffc\fR, \fImb\(ulv\fR, 0, 0, \fInprow\fR),
.br
             \fImb\(ulv\fR, 0, 0, \fIlcmp\fR), \fInqc\fR0))* \fIk\fR
.br
  else if \fIside\fR = \fB\'R\'\fR ,
.br
    \fIlwork\fR \(>= (\fImpc\fR0 + \fInqc\fR0) * \fIk\fR
.br
  end if
.br
end if.
.IP
Here \fIlcmq\fR = \fIlcm\fR/\fInpcol\fR with \fIlcm\fR = iclm(\fInprow\fR, \fInpcol\fR),
.IP
\fIiroffv\fR = \fBmod\fR(\fIiv\fR-1, \fImb\(ulv\fR), \fIicoffv\fR = \fBmod\fR( \fIjv\fR-\fI1\fR, \fInb\(ulv\fR),
.IP
\fIivrow\fR = \fBindxg2p\fR(\fIiv\fR, \fImb\(ulv\fR, \fImyrow\fR, \fIrsrc\fR\(ulv, \fInprow\fR),
.IP
\fIivcol\fR = \fBindxg2p\fR(\fIjv\fR, \fInb\(ulv\fR, \fImycol\fR, \fIcsrc\(ulv\fR, \fInpcol\fR),
.IP
\fImqv0\fR = \fBnumroc\fR(\fIm\fR+\fIicoffv\fR, \fInb\(ulv\fR, \fImycol\fR, \fIivcol\fR, \fInpcol\fR),
.IP
\fInpv0\fR = \fBnumroc\fR(\fIn\fR+\fIiroffv\fR, \fImb\(ulv\fR, \fImyrow\fR, \fIivrow\fR, \fInprow\fR),
.IP
\fIiroffc\fR = \fBmod\fR(\fIic\fR-1, \fImb\(ulc\fR ), \fIicoffc\fR= \fImod\fR( \fIjc\fR-1, \fInb\(ulc\fR),
.IP
\fIicrow\fR= \fBindxg2p\fR(\fIic\fR, \fImb\(ulc\fR, \fImyrow\fR, \fIrsrc\fR\(ulc, \fInprow\fR),
.IP
\fIiccol\fR= \fBindxg2p\fR(\fIjc\fR, \fInb\(ulc\fR, \fImycol\fR, \fIcsrc\fR\(ulc, \fInpcol\fR),
.IP
\fImpc0\fR = \fBnumroc\fR(\fIm\fR+\fIiroffc\fR, \fImb\(ulc\fR, \fImyrow\fR, \fIicrow\fR, \fInprow\fR),
.IP
\fInpc0\fR = \fBnumroc\fR(\fIn\fR+\fIicoffc\fR, \fImb\(ulc\fR, \fImyrow\fR, \fIicrow\fR, \fInprow\fR),
.IP
\fInqc0\fR = \fBnumroc\fR(\fIn\fR+\fIicoffc\fR, \fInb\(ulc\fR, \fImycol\fR, \fIiccol\fR, \fInpcol\fR),
.IP
\fBilcm\fR, \fBindxg2p\fR, and \fBnumroc\fR are ScaLAPACK tool functions; \fImyrow\fR, \fImycol\fR, \fInprow\fR, and \fInpcol\fR can be determined by calling the subroutine \fBblacs\(ulgridinfo\fR. 
.SH OUTPUT PARAMETERS

.TP 10
\fBc\fR
.NL
(local). 
.IP
On exit, sub(\fIC\fR) is overwritten by the \fIQ\fR*sub(\fIC\fR), or  \fIQ\'\fR*sub(\fIC\fR), or sub(\fIC\fR)*\fIQ\fR, or sub(\fIC\fR)*\fIQ\'\fR, where \fIQ\'\fR is the transpose (conjugate transpose) of \fIQ\fR.
