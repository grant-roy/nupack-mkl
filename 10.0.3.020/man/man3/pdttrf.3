.\" Copyright (c) 2002 \- 2008 Intel Corporation
.\" All rights reserved.
.\"
.TH p?dttrf 3 "Intel Corporation" "Copyright(C) 2002 \- 2008" "Intel(R) Math Kernel Library"
.SH NAME
p?dttrf \- Computes the \fILU\fR factorization of a diagonally dominant-like tridiagonal distributed matrix.
.SH SYNOPSIS
.PP
\fBcall psdttrf\fR(\fIn\fR, \fIdl\fR, \fId\fR, \fIdu\fR, \fIja\fR, \fIdesca\fR, \fIaf\fR, \fIlaf\fR, \fIwork\fR, \fIlwork\fR, \fIinfo\fR)
.PP
\fBcall pddttrf\fR(\fIn\fR, \fIdl\fR, \fId\fR, \fIdu\fR, \fIja\fR, \fIdesca\fR, \fIaf\fR, \fIlaf\fR, \fIwork\fR, \fIlwork\fR, \fIinfo\fR)
.PP
\fBcall pcdttrf\fR(\fIn\fR, \fIdl\fR, \fId\fR, \fIdu\fR, \fIja\fR, \fIdesca\fR, \fIaf\fR, \fIlaf\fR, \fIwork\fR, \fIlwork\fR, \fIinfo\fR)
.PP
\fBcall pzdttrf\fR(\fIn\fR, \fIdl\fR, \fId\fR, \fIdu\fR, \fIja\fR, \fIdesca\fR, \fIaf\fR, \fIlaf\fR, \fIwork\fR, \fIlwork\fR, \fIinfo\fR)
.SH INPUT PARAMETERS

.TP 10
\fBn\fR
.NL
(global) \fBINTEGER\fR.  The number of rows and columns to be operated on, that is, the order of the distributed submatrix \fIA\fR(\fI1:n\fR, \fIja:ja+n-1\fR)(\fIn\fR\(>= 0). 
.TP 10
\fBdl\fR, \fBd\fR, \fBdu\fR
.NL
(local) 
.IP
\fBREAL\fR for \fBpspttrf\fR
.IP
\fBDOUBLE PRECISON\fR for \fBpdpttrf\fR
.IP
\fBCOMPLEX\fR for \fBpcpttrf\fR
.IP
\fBDOUBLE COMPLEX\fR for \fBpzpttrf\fR.
.IP
Pointers to the local arrays of dimension (\fIdesca\fR(\fInb\(ul\fR)) each.
.IP
On entry, the array \fIdl\fR contains the local part of the global vector storing the subdiagonal elements of the matrix. Globally, \fIdl\fR(1) is not referenced, and \fIdl\fR must be aligned with \fId\fR.
.IP
On entry, the array \fId\fR contains the local part of the global vector storing the diagonal elements of the matrix.
.IP
On entry, the array \fIdu\fR contains the local part of the global vector storing the super-diagonal elements of the matrix. \fIdu\fR(\fIn\fR) is not referenced, and \fIdu\fR must be aligned with \fId\fR.
.TP 10
\fBja\fR
.NL
(global) \fBINTEGER\fR.  The index in the global array \fIA\fR that points to the start of the matrix to be operated on ( which may be either all of \fIA\fR or a submatrix of \fIA\fR).
.TP 10
\fBdesca\fR
.NL
(global and local) \fBINTEGER\fR array, dimension (\fIdlen\(ul\fR).  The array descriptor for the distributed matrix \fIA\fR. If \fIdesca\fR(\fIdtype\(ul\fR) = 501, then \fIdlen\(ul\fR\(>= 7;
.IP
else if \fIdesca\fR(\fIdtype\(ul\fR) = 1, then \fIdlen\(ul\fR\(>= 9.
.TP 10
\fBlaf\fR
.NL
(local) \fBINTEGER\fR. The dimension of the array \fIaf\fR.   
.IP
Must be \fIlaf\fR\(>= 2*(\fBNB\fR+2) .
.IP
If \fIlaf\fR is not large enough, an error code will be returned and the minimum acceptable size will be returned in \fIaf\fR(1).
.TP 10
\fBwork\fR
.NL
(local) Same type as \fId\fR. Workspace array of dimension \fIlwork\fR.
.TP 10
\fBlwork\fR
.NL
(local or global) \fBINTEGER\fR.  The size of the \fIwork\fR array, must be at least \fIlwork\fR\(>= 8*\fBNPCOL\fR. 
.SH OUTPUT PARAMETERS

.TP 10
\fBdl\fR, \fBd\fR, \fBdu\fR
.NL
On exit, overwritten by the information containing the factors of the matrix. 
.TP 10
\fBaf\fR
.NL
(local) 
.IP
\fBREAL\fR for \fBpsdttrf\fR
.IP
\fBDOUBLE PRECISION\fR for \fBpddttrf\fR
.IP
\fBCOMPLEX\fR for \fBpcdttrf\fR
.IP
\fBDOUBLE COMPLEX\fR for \fBpzdttrf\fR.
.IP
Array, dimension (\fIlaf\fR). 
.IP
Auxiliary Fillin space. Fillin is created during the factorization routine \fBp?dttrf\fR and this is stored in \fIaf\fR. 
.IP
Note that if a linear system is to be solved using \fBp?dttrs\fR after the factorization routine, \fIaf\fR must not be altered.
.TP 10
\fBwork\fR(1)
.NL
On exit, \fIwork\fR(1) contains the minimum value of \fIlwork\fR required for optimum performance. 
.TP 10
\fBinfo\fR
.NL
(global) \fBINTEGER\fR. 
.IP
If \fIinfo\fR=0, the execution is successful. 
.IP
\fIinfo\fR < 0: 
.IP
If the \fIi\fR-th argument is an array and the \fIj\fR-th entry had an illegal value, then \fIinfo\fR = -(\fIi\fR*100+\fIj\fR); if the \fIi\fR-th argument is a scalar and had an illegal value, then \fIinfo\fR = \fI-i\fR. 
.IP
\fIinfo\fR> 0: 
.IP
If \fIinfo\fR = \fBk\fR \(<= \fBNPROCS\fR, the submatrix stored on processor \fIinfo\fR and factored locally was not diagonally dominant-like, and the factorization was not completed. If \fIinfo\fR = \fBk\fR > \fBNPROCS\fR, the submatrix stored on processor \fIinfo\fR-\fBNPROCS\fR representing interactions with other processors was not nonsingular, and the factorization was not completed.
